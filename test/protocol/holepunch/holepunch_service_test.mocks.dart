// Mocks generated by Mockito 5.4.5 from annotations
// in dart_libp2p/test/protocol/holepunch/holepunch_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i14;
import 'dart:typed_data' as _i19;

import 'package:dart_libp2p/core/connmgr/conn_manager.dart' as _i6;
import 'package:dart_libp2p/core/crypto/keys.dart' as _i18;
import 'package:dart_libp2p/core/event/bus.dart' as _i7;
import 'package:dart_libp2p/core/host/host.dart' as _i13;
import 'package:dart_libp2p/core/multiaddr.dart' as _i11;
import 'package:dart_libp2p/core/network/conn.dart' as _i10;
import 'package:dart_libp2p/core/network/context.dart' as _i15;
import 'package:dart_libp2p/core/network/network.dart' as _i4;
import 'package:dart_libp2p/core/network/notifiee.dart' as _i16;
import 'package:dart_libp2p/core/network/rcmgr.dart' as _i9;
import 'package:dart_libp2p/core/network/stream.dart' as _i8;
import 'package:dart_libp2p/core/peer/addr_info.dart' as _i12;
import 'package:dart_libp2p/core/peer/peer_id.dart' as _i2;
import 'package:dart_libp2p/core/peerstore.dart' as _i3;
import 'package:dart_libp2p/core/protocol/switch.dart' as _i5;
import 'package:dart_libp2p/p2p/discovery/peer_info.dart' as _i21;
import 'package:dart_libp2p/p2p/protocol/identify/id_service.dart' as _i20;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePeerId_0 extends _i1.SmartFake implements _i2.PeerId {
  _FakePeerId_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerstore_1 extends _i1.SmartFake implements _i3.Peerstore {
  _FakePeerstore_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNetwork_2 extends _i1.SmartFake implements _i4.Network {
  _FakeNetwork_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProtocolSwitch_3 extends _i1.SmartFake
    implements _i5.ProtocolSwitch {
  _FakeProtocolSwitch_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnManager_4 extends _i1.SmartFake implements _i6.ConnManager {
  _FakeConnManager_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEventBus_5 extends _i1.SmartFake implements _i7.EventBus {
  _FakeEventBus_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeP2PStream_6<T> extends _i1.SmartFake implements _i8.P2PStream<T> {
  _FakeP2PStream_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResourceManager_7 extends _i1.SmartFake
    implements _i9.ResourceManager {
  _FakeResourceManager_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConn_8 extends _i1.SmartFake implements _i10.Conn {
  _FakeConn_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnState_9 extends _i1.SmartFake implements _i10.ConnState {
  _FakeConnState_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMultiAddr_10 extends _i1.SmartFake implements _i11.MultiAddr {
  _FakeMultiAddr_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnStats_11 extends _i1.SmartFake implements _i10.ConnStats {
  _FakeConnStats_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnScope_12 extends _i1.SmartFake implements _i9.ConnScope {
  _FakeConnScope_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamStats_13 extends _i1.SmartFake implements _i8.StreamStats {
  _FakeStreamStats_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamManagementScope_14 extends _i1.SmartFake
    implements _i9.StreamManagementScope {
  _FakeStreamManagementScope_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddrBook_15 extends _i1.SmartFake implements _i3.AddrBook {
  _FakeAddrBook_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKeyBook_16 extends _i1.SmartFake implements _i3.KeyBook {
  _FakeKeyBook_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerMetadata_17 extends _i1.SmartFake implements _i3.PeerMetadata {
  _FakePeerMetadata_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMetrics_18 extends _i1.SmartFake implements _i3.Metrics {
  _FakeMetrics_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProtoBook_19 extends _i1.SmartFake implements _i3.ProtoBook {
  _FakeProtoBook_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddrInfo_20 extends _i1.SmartFake implements _i12.AddrInfo {
  _FakeAddrInfo_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerScope_21 extends _i1.SmartFake implements _i9.PeerScope {
  _FakePeerScope_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeScopeStat_22 extends _i1.SmartFake implements _i9.ScopeStat {
  _FakeScopeStat_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResourceScopeSpan_23 extends _i1.SmartFake
    implements _i9.ResourceScopeSpan {
  _FakeResourceScopeSpan_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Host].
///
/// See the documentation for Mockito's code generation for more information.
class MockHost extends _i1.Mock implements _i13.Host {
  MockHost() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PeerId get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _FakePeerId_0(this, Invocation.getter(#id)),
          )
          as _i2.PeerId);

  @override
  _i3.Peerstore get peerStore =>
      (super.noSuchMethod(
            Invocation.getter(#peerStore),
            returnValue: _FakePeerstore_1(this, Invocation.getter(#peerStore)),
          )
          as _i3.Peerstore);

  @override
  List<_i11.MultiAddr> get addrs =>
      (super.noSuchMethod(
            Invocation.getter(#addrs),
            returnValue: <_i11.MultiAddr>[],
          )
          as List<_i11.MultiAddr>);

  @override
  _i4.Network get network =>
      (super.noSuchMethod(
            Invocation.getter(#network),
            returnValue: _FakeNetwork_2(this, Invocation.getter(#network)),
          )
          as _i4.Network);

  @override
  _i5.ProtocolSwitch get mux =>
      (super.noSuchMethod(
            Invocation.getter(#mux),
            returnValue: _FakeProtocolSwitch_3(this, Invocation.getter(#mux)),
          )
          as _i5.ProtocolSwitch);

  @override
  _i6.ConnManager get connManager =>
      (super.noSuchMethod(
            Invocation.getter(#connManager),
            returnValue: _FakeConnManager_4(
              this,
              Invocation.getter(#connManager),
            ),
          )
          as _i6.ConnManager);

  @override
  _i7.EventBus get eventBus =>
      (super.noSuchMethod(
            Invocation.getter(#eventBus),
            returnValue: _FakeEventBus_5(this, Invocation.getter(#eventBus)),
          )
          as _i7.EventBus);

  @override
  _i14.Future<void> connect(_i12.AddrInfo? pi, {_i15.Context? context}) =>
      (super.noSuchMethod(
            Invocation.method(#connect, [pi], {#context: context}),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  void setStreamHandler(String? pid, _i4.StreamHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(#setStreamHandler, [pid, handler]),
        returnValueForMissingStub: null,
      );

  @override
  void setStreamHandlerMatch(
    String? pid,
    bool Function(String)? match,
    _i4.StreamHandler? handler,
  ) => super.noSuchMethod(
    Invocation.method(#setStreamHandlerMatch, [pid, match, handler]),
    returnValueForMissingStub: null,
  );

  @override
  void removeStreamHandler(String? pid) => super.noSuchMethod(
    Invocation.method(#removeStreamHandler, [pid]),
    returnValueForMissingStub: null,
  );

  @override
  _i14.Future<_i8.P2PStream<dynamic>> newStream(
    _i2.PeerId? p,
    List<String>? pids,
    _i15.Context? context,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#newStream, [p, pids, context]),
            returnValue: _i14.Future<_i8.P2PStream<dynamic>>.value(
              _FakeP2PStream_6<dynamic>(
                this,
                Invocation.method(#newStream, [p, pids, context]),
              ),
            ),
          )
          as _i14.Future<_i8.P2PStream<dynamic>>);

  @override
  _i14.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<void> start() =>
      (super.noSuchMethod(
            Invocation.method(#start, []),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);
}

/// A class which mocks [Network].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetwork extends _i1.Mock implements _i4.Network {
  MockNetwork() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i11.MultiAddr> get listenAddresses =>
      (super.noSuchMethod(
            Invocation.getter(#listenAddresses),
            returnValue: <_i11.MultiAddr>[],
          )
          as List<_i11.MultiAddr>);

  @override
  _i14.Future<List<_i11.MultiAddr>> get interfaceListenAddresses =>
      (super.noSuchMethod(
            Invocation.getter(#interfaceListenAddresses),
            returnValue: _i14.Future<List<_i11.MultiAddr>>.value(
              <_i11.MultiAddr>[],
            ),
          )
          as _i14.Future<List<_i11.MultiAddr>>);

  @override
  _i9.ResourceManager get resourceManager =>
      (super.noSuchMethod(
            Invocation.getter(#resourceManager),
            returnValue: _FakeResourceManager_7(
              this,
              Invocation.getter(#resourceManager),
            ),
          )
          as _i9.ResourceManager);

  @override
  _i3.Peerstore get peerstore =>
      (super.noSuchMethod(
            Invocation.getter(#peerstore),
            returnValue: _FakePeerstore_1(this, Invocation.getter(#peerstore)),
          )
          as _i3.Peerstore);

  @override
  _i2.PeerId get localPeer =>
      (super.noSuchMethod(
            Invocation.getter(#localPeer),
            returnValue: _FakePeerId_0(this, Invocation.getter(#localPeer)),
          )
          as _i2.PeerId);

  @override
  List<_i2.PeerId> get peers =>
      (super.noSuchMethod(
            Invocation.getter(#peers),
            returnValue: <_i2.PeerId>[],
          )
          as List<_i2.PeerId>);

  @override
  List<_i10.Conn> get conns =>
      (super.noSuchMethod(Invocation.getter(#conns), returnValue: <_i10.Conn>[])
          as List<_i10.Conn>);

  @override
  _i14.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  void setStreamHandler(
    String? protocol,
    _i14.Future<void> Function(dynamic, _i2.PeerId)? handler,
  ) => super.noSuchMethod(
    Invocation.method(#setStreamHandler, [protocol, handler]),
    returnValueForMissingStub: null,
  );

  @override
  _i14.Future<_i8.P2PStream<dynamic>> newStream(
    _i15.Context? context,
    _i2.PeerId? peerId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#newStream, [context, peerId]),
            returnValue: _i14.Future<_i8.P2PStream<dynamic>>.value(
              _FakeP2PStream_6<dynamic>(
                this,
                Invocation.method(#newStream, [context, peerId]),
              ),
            ),
          )
          as _i14.Future<_i8.P2PStream<dynamic>>);

  @override
  _i14.Future<void> listen(List<_i11.MultiAddr>? addrs) =>
      (super.noSuchMethod(
            Invocation.method(#listen, [addrs]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<_i10.Conn> dialPeer(_i15.Context? context, _i2.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#dialPeer, [context, peerId]),
            returnValue: _i14.Future<_i10.Conn>.value(
              _FakeConn_8(
                this,
                Invocation.method(#dialPeer, [context, peerId]),
              ),
            ),
          )
          as _i14.Future<_i10.Conn>);

  @override
  _i14.Future<void> closePeer(_i2.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#closePeer, [peerId]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i4.Connectedness connectedness(_i2.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#connectedness, [peerId]),
            returnValue: _i4.Connectedness.notConnected,
          )
          as _i4.Connectedness);

  @override
  List<_i10.Conn> connsToPeer(_i2.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#connsToPeer, [peerId]),
            returnValue: <_i10.Conn>[],
          )
          as List<_i10.Conn>);

  @override
  void notify(_i16.Notifiee? notifiee) => super.noSuchMethod(
    Invocation.method(#notify, [notifiee]),
    returnValueForMissingStub: null,
  );

  @override
  void stopNotify(_i16.Notifiee? notifiee) => super.noSuchMethod(
    Invocation.method(#stopNotify, [notifiee]),
    returnValueForMissingStub: null,
  );

  @override
  bool canDial(_i2.PeerId? peerId, _i11.MultiAddr? addr) =>
      (super.noSuchMethod(
            Invocation.method(#canDial, [peerId, addr]),
            returnValue: false,
          )
          as bool);

  @override
  void removeListenAddress(_i11.MultiAddr? addr) => super.noSuchMethod(
    Invocation.method(#removeListenAddress, [addr]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Conn].
///
/// See the documentation for Mockito's code generation for more information.
class MockConn extends _i1.Mock implements _i10.Conn {
  MockConn() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i17.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i14.Future<List<_i8.P2PStream<dynamic>>> get streams =>
      (super.noSuchMethod(
            Invocation.getter(#streams),
            returnValue: _i14.Future<List<_i8.P2PStream<dynamic>>>.value(
              <_i8.P2PStream<dynamic>>[],
            ),
          )
          as _i14.Future<List<_i8.P2PStream<dynamic>>>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i2.PeerId get localPeer =>
      (super.noSuchMethod(
            Invocation.getter(#localPeer),
            returnValue: _FakePeerId_0(this, Invocation.getter(#localPeer)),
          )
          as _i2.PeerId);

  @override
  _i2.PeerId get remotePeer =>
      (super.noSuchMethod(
            Invocation.getter(#remotePeer),
            returnValue: _FakePeerId_0(this, Invocation.getter(#remotePeer)),
          )
          as _i2.PeerId);

  @override
  _i14.Future<_i18.PublicKey?> get remotePublicKey =>
      (super.noSuchMethod(
            Invocation.getter(#remotePublicKey),
            returnValue: _i14.Future<_i18.PublicKey?>.value(),
          )
          as _i14.Future<_i18.PublicKey?>);

  @override
  _i10.ConnState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeConnState_9(this, Invocation.getter(#state)),
          )
          as _i10.ConnState);

  @override
  _i11.MultiAddr get localMultiaddr =>
      (super.noSuchMethod(
            Invocation.getter(#localMultiaddr),
            returnValue: _FakeMultiAddr_10(
              this,
              Invocation.getter(#localMultiaddr),
            ),
          )
          as _i11.MultiAddr);

  @override
  _i11.MultiAddr get remoteMultiaddr =>
      (super.noSuchMethod(
            Invocation.getter(#remoteMultiaddr),
            returnValue: _FakeMultiAddr_10(
              this,
              Invocation.getter(#remoteMultiaddr),
            ),
          )
          as _i11.MultiAddr);

  @override
  _i10.ConnStats get stat =>
      (super.noSuchMethod(
            Invocation.getter(#stat),
            returnValue: _FakeConnStats_11(this, Invocation.getter(#stat)),
          )
          as _i10.ConnStats);

  @override
  _i9.ConnScope get scope =>
      (super.noSuchMethod(
            Invocation.getter(#scope),
            returnValue: _FakeConnScope_12(this, Invocation.getter(#scope)),
          )
          as _i9.ConnScope);

  @override
  _i14.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<_i8.P2PStream<dynamic>> newStream(_i15.Context? context) =>
      (super.noSuchMethod(
            Invocation.method(#newStream, [context]),
            returnValue: _i14.Future<_i8.P2PStream<dynamic>>.value(
              _FakeP2PStream_6<dynamic>(
                this,
                Invocation.method(#newStream, [context]),
              ),
            ),
          )
          as _i14.Future<_i8.P2PStream<dynamic>>);
}

/// A class which mocks [P2PStream].
///
/// See the documentation for Mockito's code generation for more information.
class MockP2PStream<T> extends _i1.Mock implements _i8.P2PStream<T> {
  MockP2PStream() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Conn get conn =>
      (super.noSuchMethod(
            Invocation.getter(#conn),
            returnValue: _FakeConn_8(this, Invocation.getter(#conn)),
          )
          as _i10.Conn);

  @override
  _i8.P2PStream<_i19.Uint8List> get incoming =>
      (super.noSuchMethod(
            Invocation.getter(#incoming),
            returnValue: _FakeP2PStream_6<_i19.Uint8List>(
              this,
              Invocation.getter(#incoming),
            ),
          )
          as _i8.P2PStream<_i19.Uint8List>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  String id() =>
      (super.noSuchMethod(
            Invocation.method(#id, []),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(#id, []),
            ),
          )
          as String);

  @override
  String protocol() =>
      (super.noSuchMethod(
            Invocation.method(#protocol, []),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(#protocol, []),
            ),
          )
          as String);

  @override
  _i14.Future<void> setProtocol(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#setProtocol, [id]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i8.StreamStats stat() =>
      (super.noSuchMethod(
            Invocation.method(#stat, []),
            returnValue: _FakeStreamStats_13(
              this,
              Invocation.method(#stat, []),
            ),
          )
          as _i8.StreamStats);

  @override
  _i9.StreamManagementScope scope() =>
      (super.noSuchMethod(
            Invocation.method(#scope, []),
            returnValue: _FakeStreamManagementScope_14(
              this,
              Invocation.method(#scope, []),
            ),
          )
          as _i9.StreamManagementScope);

  @override
  _i14.Future<_i19.Uint8List> read([int? maxLength]) =>
      (super.noSuchMethod(
            Invocation.method(#read, [maxLength]),
            returnValue: _i14.Future<_i19.Uint8List>.value(_i19.Uint8List(0)),
          )
          as _i14.Future<_i19.Uint8List>);

  @override
  _i14.Future<void> write(_i19.Uint8List? data) =>
      (super.noSuchMethod(
            Invocation.method(#write, [data]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<void> closeWrite() =>
      (super.noSuchMethod(
            Invocation.method(#closeWrite, []),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<void> closeRead() =>
      (super.noSuchMethod(
            Invocation.method(#closeRead, []),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<void> reset() =>
      (super.noSuchMethod(
            Invocation.method(#reset, []),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<void> setDeadline(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setDeadline, [time]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<void> setReadDeadline(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setReadDeadline, [time]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<void> setWriteDeadline(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setWriteDeadline, [time]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);
}

/// A class which mocks [IDService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDService extends _i1.Mock implements _i20.IDService {
  MockIDService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<void> identifyConn(_i10.Conn? conn) =>
      (super.noSuchMethod(
            Invocation.method(#identifyConn, [conn]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<void> identifyWait(_i10.Conn? conn) =>
      (super.noSuchMethod(
            Invocation.method(#identifyWait, [conn]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  List<_i11.MultiAddr> ownObservedAddrs() =>
      (super.noSuchMethod(
            Invocation.method(#ownObservedAddrs, []),
            returnValue: <_i11.MultiAddr>[],
          )
          as List<_i11.MultiAddr>);

  @override
  List<_i11.MultiAddr> observedAddrsFor(_i11.MultiAddr? local) =>
      (super.noSuchMethod(
            Invocation.method(#observedAddrsFor, [local]),
            returnValue: <_i11.MultiAddr>[],
          )
          as List<_i11.MultiAddr>);

  @override
  _i14.Future<void> start() =>
      (super.noSuchMethod(
            Invocation.method(#start, []),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);
}

/// A class which mocks [Peerstore].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeerstore extends _i1.Mock implements _i3.Peerstore {
  MockPeerstore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AddrBook get addrBook =>
      (super.noSuchMethod(
            Invocation.getter(#addrBook),
            returnValue: _FakeAddrBook_15(this, Invocation.getter(#addrBook)),
          )
          as _i3.AddrBook);

  @override
  _i3.KeyBook get keyBook =>
      (super.noSuchMethod(
            Invocation.getter(#keyBook),
            returnValue: _FakeKeyBook_16(this, Invocation.getter(#keyBook)),
          )
          as _i3.KeyBook);

  @override
  _i3.PeerMetadata get peerMetadata =>
      (super.noSuchMethod(
            Invocation.getter(#peerMetadata),
            returnValue: _FakePeerMetadata_17(
              this,
              Invocation.getter(#peerMetadata),
            ),
          )
          as _i3.PeerMetadata);

  @override
  _i3.Metrics get metrics =>
      (super.noSuchMethod(
            Invocation.getter(#metrics),
            returnValue: _FakeMetrics_18(this, Invocation.getter(#metrics)),
          )
          as _i3.Metrics);

  @override
  _i3.ProtoBook get protoBook =>
      (super.noSuchMethod(
            Invocation.getter(#protoBook),
            returnValue: _FakeProtoBook_19(this, Invocation.getter(#protoBook)),
          )
          as _i3.ProtoBook);

  @override
  _i14.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<_i12.AddrInfo> peerInfo(_i2.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#peerInfo, [id]),
            returnValue: _i14.Future<_i12.AddrInfo>.value(
              _FakeAddrInfo_20(this, Invocation.method(#peerInfo, [id])),
            ),
          )
          as _i14.Future<_i12.AddrInfo>);

  @override
  _i14.Future<List<_i2.PeerId>> peers() =>
      (super.noSuchMethod(
            Invocation.method(#peers, []),
            returnValue: _i14.Future<List<_i2.PeerId>>.value(<_i2.PeerId>[]),
          )
          as _i14.Future<List<_i2.PeerId>>);

  @override
  _i14.Future<void> removePeer(_i2.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#removePeer, [id]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<void> addOrUpdatePeer(
    _i2.PeerId? peerId, {
    List<_i11.MultiAddr>? addrs,
    List<String>? protocols,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addOrUpdatePeer,
              [peerId],
              {#addrs: addrs, #protocols: protocols, #metadata: metadata},
            ),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  _i14.Future<_i21.PeerInfo?> getPeer(_i2.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#getPeer, [peerId]),
            returnValue: _i14.Future<_i21.PeerInfo?>.value(),
          )
          as _i14.Future<_i21.PeerInfo?>);
}

/// A class which mocks [StreamManagementScope].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamManagementScope extends _i1.Mock
    implements _i9.StreamManagementScope {
  MockStreamManagementScope() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.PeerScope get peerScope =>
      (super.noSuchMethod(
            Invocation.getter(#peerScope),
            returnValue: _FakePeerScope_21(this, Invocation.getter(#peerScope)),
          )
          as _i9.PeerScope);

  @override
  _i9.ScopeStat get stat =>
      (super.noSuchMethod(
            Invocation.getter(#stat),
            returnValue: _FakeScopeStat_22(this, Invocation.getter(#stat)),
          )
          as _i9.ScopeStat);

  @override
  _i14.Future<void> setProtocol(String? protocol) =>
      (super.noSuchMethod(
            Invocation.method(#setProtocol, [protocol]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  void done() => super.noSuchMethod(
    Invocation.method(#done, []),
    returnValueForMissingStub: null,
  );

  @override
  _i14.Future<void> reserveMemory(int? size, int? priority) =>
      (super.noSuchMethod(
            Invocation.method(#reserveMemory, [size, priority]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  void releaseMemory(int? size) => super.noSuchMethod(
    Invocation.method(#releaseMemory, [size]),
    returnValueForMissingStub: null,
  );

  @override
  _i14.Future<_i9.ResourceScopeSpan> beginSpan() =>
      (super.noSuchMethod(
            Invocation.method(#beginSpan, []),
            returnValue: _i14.Future<_i9.ResourceScopeSpan>.value(
              _FakeResourceScopeSpan_23(
                this,
                Invocation.method(#beginSpan, []),
              ),
            ),
          )
          as _i14.Future<_i9.ResourceScopeSpan>);

  @override
  _i14.Future<void> setService(String? service) =>
      (super.noSuchMethod(
            Invocation.method(#setService, [service]),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);
}
