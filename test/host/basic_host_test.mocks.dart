// Mocks generated by Mockito 5.4.5 from annotations
// in dart_libp2p/test/host/basic_host_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:typed_data' as _i16;

import 'package:dart_libp2p/core/crypto/keys.dart' as _i10;
import 'package:dart_libp2p/core/crypto/pb/crypto.pb.dart' as _i11;
import 'package:dart_libp2p/core/multiaddr.dart' as _i8;
import 'package:dart_libp2p/core/network/common.dart' as _i19;
import 'package:dart_libp2p/core/network/conn.dart' as _i6;
import 'package:dart_libp2p/core/network/context.dart' as _i13;
import 'package:dart_libp2p/core/network/network.dart' as _i12;
import 'package:dart_libp2p/core/network/notifiee.dart' as _i14;
import 'package:dart_libp2p/core/network/rcmgr.dart' as _i2;
import 'package:dart_libp2p/core/network/stream.dart' as _i5;
import 'package:dart_libp2p/core/peer/addr_info.dart' as _i7;
import 'package:dart_libp2p/core/peer/peer_id.dart' as _i4;
import 'package:dart_libp2p/core/peerstore.dart' as _i3;
import 'package:dart_libp2p/p2p/discovery/peer_info.dart' as _i15;
import 'package:dart_libp2p/p2p/multiaddr/protocol.dart' as _i18;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResourceManager_0 extends _i1.SmartFake
    implements _i2.ResourceManager {
  _FakeResourceManager_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerstore_1 extends _i1.SmartFake implements _i3.Peerstore {
  _FakePeerstore_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerId_2 extends _i1.SmartFake implements _i4.PeerId {
  _FakePeerId_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeP2PStream_3<T> extends _i1.SmartFake implements _i5.P2PStream<T> {
  _FakeP2PStream_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConn_4 extends _i1.SmartFake implements _i6.Conn {
  _FakeConn_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddrBook_5 extends _i1.SmartFake implements _i3.AddrBook {
  _FakeAddrBook_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKeyBook_6 extends _i1.SmartFake implements _i3.KeyBook {
  _FakeKeyBook_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerMetadata_7 extends _i1.SmartFake implements _i3.PeerMetadata {
  _FakePeerMetadata_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMetrics_8 extends _i1.SmartFake implements _i3.Metrics {
  _FakeMetrics_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProtoBook_9 extends _i1.SmartFake implements _i3.ProtoBook {
  _FakeProtoBook_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddrInfo_10 extends _i1.SmartFake implements _i7.AddrInfo {
  _FakeAddrInfo_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamStats_11 extends _i1.SmartFake implements _i5.StreamStats {
  _FakeStreamStats_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamManagementScope_12 extends _i1.SmartFake
    implements _i2.StreamManagementScope {
  _FakeStreamManagementScope_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnState_13 extends _i1.SmartFake implements _i6.ConnState {
  _FakeConnState_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMultiAddr_14 extends _i1.SmartFake implements _i8.MultiAddr {
  _FakeMultiAddr_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnStats_15 extends _i1.SmartFake implements _i6.ConnStats {
  _FakeConnStats_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnScope_16 extends _i1.SmartFake implements _i2.ConnScope {
  _FakeConnScope_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnManagementScope_17 extends _i1.SmartFake
    implements _i2.ConnManagementScope {
  _FakeConnManagementScope_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_18<T1> extends _i1.SmartFake implements _i9.Future<T1> {
  _FakeFuture_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePublicKey_19 extends _i1.SmartFake implements _i10.PublicKey {
  _FakePublicKey_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKeyType_20 extends _i1.SmartFake implements _i11.KeyType {
  _FakeKeyType_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Network].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetwork extends _i1.Mock implements _i12.Network {
  MockNetwork() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i8.MultiAddr> get listenAddresses =>
      (super.noSuchMethod(
            Invocation.getter(#listenAddresses),
            returnValue: <_i8.MultiAddr>[],
          )
          as List<_i8.MultiAddr>);

  @override
  _i9.Future<List<_i8.MultiAddr>> get interfaceListenAddresses =>
      (super.noSuchMethod(
            Invocation.getter(#interfaceListenAddresses),
            returnValue: _i9.Future<List<_i8.MultiAddr>>.value(
              <_i8.MultiAddr>[],
            ),
          )
          as _i9.Future<List<_i8.MultiAddr>>);

  @override
  _i2.ResourceManager get resourceManager =>
      (super.noSuchMethod(
            Invocation.getter(#resourceManager),
            returnValue: _FakeResourceManager_0(
              this,
              Invocation.getter(#resourceManager),
            ),
          )
          as _i2.ResourceManager);

  @override
  _i3.Peerstore get peerstore =>
      (super.noSuchMethod(
            Invocation.getter(#peerstore),
            returnValue: _FakePeerstore_1(this, Invocation.getter(#peerstore)),
          )
          as _i3.Peerstore);

  @override
  _i4.PeerId get localPeer =>
      (super.noSuchMethod(
            Invocation.getter(#localPeer),
            returnValue: _FakePeerId_2(this, Invocation.getter(#localPeer)),
          )
          as _i4.PeerId);

  @override
  List<_i4.PeerId> get peers =>
      (super.noSuchMethod(
            Invocation.getter(#peers),
            returnValue: <_i4.PeerId>[],
          )
          as List<_i4.PeerId>);

  @override
  List<_i6.Conn> get conns =>
      (super.noSuchMethod(Invocation.getter(#conns), returnValue: <_i6.Conn>[])
          as List<_i6.Conn>);

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  void setStreamHandler(
    String? protocol,
    _i9.Future<void> Function(dynamic, _i4.PeerId)? handler,
  ) => super.noSuchMethod(
    Invocation.method(#setStreamHandler, [protocol, handler]),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Future<_i5.P2PStream<dynamic>> newStream(
    _i13.Context? context,
    _i4.PeerId? peerId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#newStream, [context, peerId]),
            returnValue: _i9.Future<_i5.P2PStream<dynamic>>.value(
              _FakeP2PStream_3<dynamic>(
                this,
                Invocation.method(#newStream, [context, peerId]),
              ),
            ),
          )
          as _i9.Future<_i5.P2PStream<dynamic>>);

  @override
  _i9.Future<void> listen(List<_i8.MultiAddr>? addrs) =>
      (super.noSuchMethod(
            Invocation.method(#listen, [addrs]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i6.Conn> dialPeer(_i13.Context? context, _i4.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#dialPeer, [context, peerId]),
            returnValue: _i9.Future<_i6.Conn>.value(
              _FakeConn_4(
                this,
                Invocation.method(#dialPeer, [context, peerId]),
              ),
            ),
          )
          as _i9.Future<_i6.Conn>);

  @override
  _i9.Future<void> closePeer(_i4.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#closePeer, [peerId]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i12.Connectedness connectedness(_i4.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#connectedness, [peerId]),
            returnValue: _i12.Connectedness.notConnected,
          )
          as _i12.Connectedness);

  @override
  List<_i6.Conn> connsToPeer(_i4.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#connsToPeer, [peerId]),
            returnValue: <_i6.Conn>[],
          )
          as List<_i6.Conn>);

  @override
  void notify(_i14.Notifiee? notifiee) => super.noSuchMethod(
    Invocation.method(#notify, [notifiee]),
    returnValueForMissingStub: null,
  );

  @override
  void stopNotify(_i14.Notifiee? notifiee) => super.noSuchMethod(
    Invocation.method(#stopNotify, [notifiee]),
    returnValueForMissingStub: null,
  );

  @override
  bool canDial(_i4.PeerId? peerId, _i8.MultiAddr? addr) =>
      (super.noSuchMethod(
            Invocation.method(#canDial, [peerId, addr]),
            returnValue: false,
          )
          as bool);

  @override
  void removeListenAddress(_i8.MultiAddr? addr) => super.noSuchMethod(
    Invocation.method(#removeListenAddress, [addr]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Peerstore].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeerstore extends _i1.Mock implements _i3.Peerstore {
  MockPeerstore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AddrBook get addrBook =>
      (super.noSuchMethod(
            Invocation.getter(#addrBook),
            returnValue: _FakeAddrBook_5(this, Invocation.getter(#addrBook)),
          )
          as _i3.AddrBook);

  @override
  _i3.KeyBook get keyBook =>
      (super.noSuchMethod(
            Invocation.getter(#keyBook),
            returnValue: _FakeKeyBook_6(this, Invocation.getter(#keyBook)),
          )
          as _i3.KeyBook);

  @override
  _i3.PeerMetadata get peerMetadata =>
      (super.noSuchMethod(
            Invocation.getter(#peerMetadata),
            returnValue: _FakePeerMetadata_7(
              this,
              Invocation.getter(#peerMetadata),
            ),
          )
          as _i3.PeerMetadata);

  @override
  _i3.Metrics get metrics =>
      (super.noSuchMethod(
            Invocation.getter(#metrics),
            returnValue: _FakeMetrics_8(this, Invocation.getter(#metrics)),
          )
          as _i3.Metrics);

  @override
  _i3.ProtoBook get protoBook =>
      (super.noSuchMethod(
            Invocation.getter(#protoBook),
            returnValue: _FakeProtoBook_9(this, Invocation.getter(#protoBook)),
          )
          as _i3.ProtoBook);

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i7.AddrInfo> peerInfo(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#peerInfo, [id]),
            returnValue: _i9.Future<_i7.AddrInfo>.value(
              _FakeAddrInfo_10(this, Invocation.method(#peerInfo, [id])),
            ),
          )
          as _i9.Future<_i7.AddrInfo>);

  @override
  _i9.Future<List<_i4.PeerId>> peers() =>
      (super.noSuchMethod(
            Invocation.method(#peers, []),
            returnValue: _i9.Future<List<_i4.PeerId>>.value(<_i4.PeerId>[]),
          )
          as _i9.Future<List<_i4.PeerId>>);

  @override
  _i9.Future<void> removePeer(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#removePeer, [id]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> addOrUpdatePeer(
    _i4.PeerId? peerId, {
    List<_i8.MultiAddr>? addrs,
    List<String>? protocols,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addOrUpdatePeer,
              [peerId],
              {#addrs: addrs, #protocols: protocols, #metadata: metadata},
            ),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i15.PeerInfo?> getPeer(_i4.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#getPeer, [peerId]),
            returnValue: _i9.Future<_i15.PeerInfo?>.value(),
          )
          as _i9.Future<_i15.PeerInfo?>);
}

/// A class which mocks [P2PStream].
///
/// See the documentation for Mockito's code generation for more information.
class MockP2PStream<T> extends _i1.Mock implements _i5.P2PStream<T> {
  MockP2PStream() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Conn get conn =>
      (super.noSuchMethod(
            Invocation.getter(#conn),
            returnValue: _FakeConn_4(this, Invocation.getter(#conn)),
          )
          as _i6.Conn);

  @override
  _i5.P2PStream<_i16.Uint8List> get incoming =>
      (super.noSuchMethod(
            Invocation.getter(#incoming),
            returnValue: _FakeP2PStream_3<_i16.Uint8List>(
              this,
              Invocation.getter(#incoming),
            ),
          )
          as _i5.P2PStream<_i16.Uint8List>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  String id() =>
      (super.noSuchMethod(
            Invocation.method(#id, []),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(#id, []),
            ),
          )
          as String);

  @override
  String protocol() =>
      (super.noSuchMethod(
            Invocation.method(#protocol, []),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(#protocol, []),
            ),
          )
          as String);

  @override
  _i9.Future<void> setProtocol(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#setProtocol, [id]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i5.StreamStats stat() =>
      (super.noSuchMethod(
            Invocation.method(#stat, []),
            returnValue: _FakeStreamStats_11(
              this,
              Invocation.method(#stat, []),
            ),
          )
          as _i5.StreamStats);

  @override
  _i2.StreamManagementScope scope() =>
      (super.noSuchMethod(
            Invocation.method(#scope, []),
            returnValue: _FakeStreamManagementScope_12(
              this,
              Invocation.method(#scope, []),
            ),
          )
          as _i2.StreamManagementScope);

  @override
  _i9.Future<_i16.Uint8List> read([int? maxLength]) =>
      (super.noSuchMethod(
            Invocation.method(#read, [maxLength]),
            returnValue: _i9.Future<_i16.Uint8List>.value(_i16.Uint8List(0)),
          )
          as _i9.Future<_i16.Uint8List>);

  @override
  _i9.Future<void> write(_i16.Uint8List? data) =>
      (super.noSuchMethod(
            Invocation.method(#write, [data]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> closeWrite() =>
      (super.noSuchMethod(
            Invocation.method(#closeWrite, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> closeRead() =>
      (super.noSuchMethod(
            Invocation.method(#closeRead, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> reset() =>
      (super.noSuchMethod(
            Invocation.method(#reset, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setDeadline(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setDeadline, [time]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setReadDeadline(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setReadDeadline, [time]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setWriteDeadline(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setWriteDeadline, [time]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [Conn].
///
/// See the documentation for Mockito's code generation for more information.
class MockConn extends _i1.Mock implements _i6.Conn {
  MockConn() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i17.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i9.Future<List<_i5.P2PStream<dynamic>>> get streams =>
      (super.noSuchMethod(
            Invocation.getter(#streams),
            returnValue: _i9.Future<List<_i5.P2PStream<dynamic>>>.value(
              <_i5.P2PStream<dynamic>>[],
            ),
          )
          as _i9.Future<List<_i5.P2PStream<dynamic>>>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i4.PeerId get localPeer =>
      (super.noSuchMethod(
            Invocation.getter(#localPeer),
            returnValue: _FakePeerId_2(this, Invocation.getter(#localPeer)),
          )
          as _i4.PeerId);

  @override
  _i4.PeerId get remotePeer =>
      (super.noSuchMethod(
            Invocation.getter(#remotePeer),
            returnValue: _FakePeerId_2(this, Invocation.getter(#remotePeer)),
          )
          as _i4.PeerId);

  @override
  _i9.Future<_i10.PublicKey?> get remotePublicKey =>
      (super.noSuchMethod(
            Invocation.getter(#remotePublicKey),
            returnValue: _i9.Future<_i10.PublicKey?>.value(),
          )
          as _i9.Future<_i10.PublicKey?>);

  @override
  _i6.ConnState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeConnState_13(this, Invocation.getter(#state)),
          )
          as _i6.ConnState);

  @override
  _i8.MultiAddr get localMultiaddr =>
      (super.noSuchMethod(
            Invocation.getter(#localMultiaddr),
            returnValue: _FakeMultiAddr_14(
              this,
              Invocation.getter(#localMultiaddr),
            ),
          )
          as _i8.MultiAddr);

  @override
  _i8.MultiAddr get remoteMultiaddr =>
      (super.noSuchMethod(
            Invocation.getter(#remoteMultiaddr),
            returnValue: _FakeMultiAddr_14(
              this,
              Invocation.getter(#remoteMultiaddr),
            ),
          )
          as _i8.MultiAddr);

  @override
  _i6.ConnStats get stat =>
      (super.noSuchMethod(
            Invocation.getter(#stat),
            returnValue: _FakeConnStats_15(this, Invocation.getter(#stat)),
          )
          as _i6.ConnStats);

  @override
  _i2.ConnScope get scope =>
      (super.noSuchMethod(
            Invocation.getter(#scope),
            returnValue: _FakeConnScope_16(this, Invocation.getter(#scope)),
          )
          as _i2.ConnScope);

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i5.P2PStream<dynamic>> newStream(_i13.Context? context) =>
      (super.noSuchMethod(
            Invocation.method(#newStream, [context]),
            returnValue: _i9.Future<_i5.P2PStream<dynamic>>.value(
              _FakeP2PStream_3<dynamic>(
                this,
                Invocation.method(#newStream, [context]),
              ),
            ),
          )
          as _i9.Future<_i5.P2PStream<dynamic>>);
}

/// A class which mocks [AddrBook].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddrBook extends _i1.Mock implements _i3.AddrBook {
  MockAddrBook() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> addAddr(_i4.PeerId? p, _i8.MultiAddr? addr, Duration? ttl) =>
      (super.noSuchMethod(
            Invocation.method(#addAddr, [p, addr, ttl]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> addAddrs(
    _i4.PeerId? p,
    List<_i8.MultiAddr>? addrs,
    Duration? ttl,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addAddrs, [p, addrs, ttl]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setAddr(_i4.PeerId? p, _i8.MultiAddr? addr, Duration? ttl) =>
      (super.noSuchMethod(
            Invocation.method(#setAddr, [p, addr, ttl]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setAddrs(
    _i4.PeerId? p,
    List<_i8.MultiAddr>? addrs,
    Duration? ttl,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setAddrs, [p, addrs, ttl]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> updateAddrs(
    _i4.PeerId? p,
    Duration? oldTTL,
    Duration? newTTL,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAddrs, [p, oldTTL, newTTL]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<List<_i8.MultiAddr>> addrs(_i4.PeerId? p) =>
      (super.noSuchMethod(
            Invocation.method(#addrs, [p]),
            returnValue: _i9.Future<List<_i8.MultiAddr>>.value(
              <_i8.MultiAddr>[],
            ),
          )
          as _i9.Future<List<_i8.MultiAddr>>);

  @override
  _i9.Future<_i9.Stream<_i8.MultiAddr>> addrStream(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#addrStream, [id]),
            returnValue: _i9.Future<_i9.Stream<_i8.MultiAddr>>.value(
              _i9.Stream<_i8.MultiAddr>.empty(),
            ),
          )
          as _i9.Future<_i9.Stream<_i8.MultiAddr>>);

  @override
  _i9.Future<void> clearAddrs(_i4.PeerId? p) =>
      (super.noSuchMethod(
            Invocation.method(#clearAddrs, [p]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<List<_i4.PeerId>> peersWithAddrs() =>
      (super.noSuchMethod(
            Invocation.method(#peersWithAddrs, []),
            returnValue: _i9.Future<List<_i4.PeerId>>.value(<_i4.PeerId>[]),
          )
          as _i9.Future<List<_i4.PeerId>>);
}

/// A class which mocks [ProtoBook].
///
/// See the documentation for Mockito's code generation for more information.
class MockProtoBook extends _i1.Mock implements _i3.ProtoBook {
  MockProtoBook() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<List<String>> getProtocols(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProtocols, [id]),
            returnValue: _i9.Future<List<String>>.value(<String>[]),
          )
          as _i9.Future<List<String>>);

  @override
  void addProtocols(_i4.PeerId? id, List<String>? protocols) =>
      super.noSuchMethod(
        Invocation.method(#addProtocols, [id, protocols]),
        returnValueForMissingStub: null,
      );

  @override
  void setProtocols(_i4.PeerId? id, List<String>? protocols) =>
      super.noSuchMethod(
        Invocation.method(#setProtocols, [id, protocols]),
        returnValueForMissingStub: null,
      );

  @override
  void removeProtocols(_i4.PeerId? id, List<String>? protocols) =>
      super.noSuchMethod(
        Invocation.method(#removeProtocols, [id, protocols]),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<List<String>> supportsProtocols(
    _i4.PeerId? id,
    List<String>? protocols,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#supportsProtocols, [id, protocols]),
            returnValue: _i9.Future<List<String>>.value(<String>[]),
          )
          as _i9.Future<List<String>>);

  @override
  _i9.Future<String?> firstSupportedProtocol(
    _i4.PeerId? id,
    List<String>? protocols,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#firstSupportedProtocol, [id, protocols]),
            returnValue: _i9.Future<String?>.value(),
          )
          as _i9.Future<String?>);

  @override
  void removePeer(_i4.PeerId? id) => super.noSuchMethod(
    Invocation.method(#removePeer, [id]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [MultiAddr].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultiAddr extends _i1.Mock implements _i8.MultiAddr {
  MockMultiAddr() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i18.Protocol> get protocols =>
      (super.noSuchMethod(
            Invocation.getter(#protocols),
            returnValue: <_i18.Protocol>[],
          )
          as List<_i18.Protocol>);

  @override
  List<String> get values =>
      (super.noSuchMethod(Invocation.getter(#values), returnValue: <String>[])
          as List<String>);

  @override
  List<(_i18.Protocol, String)> get components =>
      (super.noSuchMethod(
            Invocation.getter(#components),
            returnValue: <(_i18.Protocol, String)>[],
          )
          as List<(_i18.Protocol, String)>);

  @override
  bool get hasUdx =>
      (super.noSuchMethod(Invocation.getter(#hasUdx), returnValue: false)
          as bool);

  @override
  bool get hasQuicV1 =>
      (super.noSuchMethod(Invocation.getter(#hasQuicV1), returnValue: false)
          as bool);

  @override
  bool get hasWebtransport =>
      (super.noSuchMethod(
            Invocation.getter(#hasWebtransport),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasCircuit =>
      (super.noSuchMethod(Invocation.getter(#hasCircuit), returnValue: false)
          as bool);

  @override
  List<String> get transports =>
      (super.noSuchMethod(
            Invocation.getter(#transports),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i16.Uint8List toBytes() =>
      (super.noSuchMethod(
            Invocation.method(#toBytes, []),
            returnValue: _i16.Uint8List(0),
          )
          as _i16.Uint8List);

  @override
  bool hasProtocol(String? protocol) =>
      (super.noSuchMethod(
            Invocation.method(#hasProtocol, [protocol]),
            returnValue: false,
          )
          as bool);

  @override
  String? valueForProtocol(String? protocol) =>
      (super.noSuchMethod(Invocation.method(#valueForProtocol, [protocol]))
          as String?);

  @override
  _i8.MultiAddr encapsulate(String? protocolName, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#encapsulate, [protocolName, value]),
            returnValue: _FakeMultiAddr_14(
              this,
              Invocation.method(#encapsulate, [protocolName, value]),
            ),
          )
          as _i8.MultiAddr);

  @override
  _i8.MultiAddr? decapsulate(String? protocol) =>
      (super.noSuchMethod(Invocation.method(#decapsulate, [protocol]))
          as _i8.MultiAddr?);

  @override
  bool equals(_i8.MultiAddr? addr) =>
      (super.noSuchMethod(
            Invocation.method(#equals, [addr]),
            returnValue: false,
          )
          as bool);

  @override
  bool isLoopback() =>
      (super.noSuchMethod(
            Invocation.method(#isLoopback, []),
            returnValue: false,
          )
          as bool);

  @override
  bool isPrivate() =>
      (super.noSuchMethod(Invocation.method(#isPrivate, []), returnValue: false)
          as bool);

  @override
  bool isPublic() =>
      (super.noSuchMethod(Invocation.method(#isPublic, []), returnValue: false)
          as bool);
}

/// A class which mocks [ResourceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockResourceManager extends _i1.Mock implements _i2.ResourceManager {
  MockResourceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.ConnManagementScope> openConnection(
    _i19.Direction? dir,
    bool? usefd,
    _i8.MultiAddr? endpoint,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#openConnection, [dir, usefd, endpoint]),
            returnValue: _i9.Future<_i2.ConnManagementScope>.value(
              _FakeConnManagementScope_17(
                this,
                Invocation.method(#openConnection, [dir, usefd, endpoint]),
              ),
            ),
          )
          as _i9.Future<_i2.ConnManagementScope>);

  @override
  _i9.Future<_i2.StreamManagementScope> openStream(
    _i4.PeerId? peerId,
    _i19.Direction? dir,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#openStream, [peerId, dir]),
            returnValue: _i9.Future<_i2.StreamManagementScope>.value(
              _FakeStreamManagementScope_12(
                this,
                Invocation.method(#openStream, [peerId, dir]),
              ),
            ),
          )
          as _i9.Future<_i2.StreamManagementScope>);

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<T> viewSystem<T>(_i9.Future<T> Function(_i2.ResourceScope)? f) =>
      (super.noSuchMethod(
            Invocation.method(#viewSystem, [f]),
            returnValue:
                _i17.ifNotNull(
                  _i17.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewSystem, [f]),
                  ),
                  (T v) => _i9.Future<T>.value(v),
                ) ??
                _FakeFuture_18<T>(this, Invocation.method(#viewSystem, [f])),
          )
          as _i9.Future<T>);

  @override
  _i9.Future<T> viewTransient<T>(
    _i9.Future<T> Function(_i2.ResourceScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewTransient, [f]),
            returnValue:
                _i17.ifNotNull(
                  _i17.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewTransient, [f]),
                  ),
                  (T v) => _i9.Future<T>.value(v),
                ) ??
                _FakeFuture_18<T>(this, Invocation.method(#viewTransient, [f])),
          )
          as _i9.Future<T>);

  @override
  _i9.Future<T> viewService<T>(
    String? service,
    _i9.Future<T> Function(_i2.ServiceScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewService, [service, f]),
            returnValue:
                _i17.ifNotNull(
                  _i17.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewService, [service, f]),
                  ),
                  (T v) => _i9.Future<T>.value(v),
                ) ??
                _FakeFuture_18<T>(
                  this,
                  Invocation.method(#viewService, [service, f]),
                ),
          )
          as _i9.Future<T>);

  @override
  _i9.Future<T> viewProtocol<T>(
    String? protocol,
    _i9.Future<T> Function(_i2.ProtocolScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewProtocol, [protocol, f]),
            returnValue:
                _i17.ifNotNull(
                  _i17.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewProtocol, [protocol, f]),
                  ),
                  (T v) => _i9.Future<T>.value(v),
                ) ??
                _FakeFuture_18<T>(
                  this,
                  Invocation.method(#viewProtocol, [protocol, f]),
                ),
          )
          as _i9.Future<T>);

  @override
  _i9.Future<T> viewPeer<T>(
    _i4.PeerId? peerId,
    _i9.Future<T> Function(_i2.PeerScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewPeer, [peerId, f]),
            returnValue:
                _i17.ifNotNull(
                  _i17.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewPeer, [peerId, f]),
                  ),
                  (T v) => _i9.Future<T>.value(v),
                ) ??
                _FakeFuture_18<T>(
                  this,
                  Invocation.method(#viewPeer, [peerId, f]),
                ),
          )
          as _i9.Future<T>);
}

/// A class which mocks [KeyBook].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyBook extends _i1.Mock implements _i3.KeyBook {
  MockKeyBook() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i10.PublicKey?> pubKey(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#pubKey, [id]),
            returnValue: _i9.Future<_i10.PublicKey?>.value(),
          )
          as _i9.Future<_i10.PublicKey?>);

  @override
  void addPubKey(_i4.PeerId? id, _i10.PublicKey? pk) => super.noSuchMethod(
    Invocation.method(#addPubKey, [id, pk]),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Future<_i10.PrivateKey?> privKey(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#privKey, [id]),
            returnValue: _i9.Future<_i10.PrivateKey?>.value(),
          )
          as _i9.Future<_i10.PrivateKey?>);

  @override
  void addPrivKey(_i4.PeerId? id, _i10.PrivateKey? sk) => super.noSuchMethod(
    Invocation.method(#addPrivKey, [id, sk]),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Future<List<_i4.PeerId>> peersWithKeys() =>
      (super.noSuchMethod(
            Invocation.method(#peersWithKeys, []),
            returnValue: _i9.Future<List<_i4.PeerId>>.value(<_i4.PeerId>[]),
          )
          as _i9.Future<List<_i4.PeerId>>);

  @override
  void removePeer(_i4.PeerId? id) => super.noSuchMethod(
    Invocation.method(#removePeer, [id]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PrivateKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrivateKey extends _i1.Mock implements _i10.PrivateKey {
  MockPrivateKey() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.PublicKey get publicKey =>
      (super.noSuchMethod(
            Invocation.getter(#publicKey),
            returnValue: _FakePublicKey_19(this, Invocation.getter(#publicKey)),
          )
          as _i10.PublicKey);

  @override
  _i11.KeyType get type =>
      (super.noSuchMethod(
            Invocation.getter(#type),
            returnValue: _FakeKeyType_20(this, Invocation.getter(#type)),
          )
          as _i11.KeyType);

  @override
  _i16.Uint8List get raw =>
      (super.noSuchMethod(
            Invocation.getter(#raw),
            returnValue: _i16.Uint8List(0),
          )
          as _i16.Uint8List);

  @override
  _i9.Future<_i16.Uint8List> sign(_i16.Uint8List? data) =>
      (super.noSuchMethod(
            Invocation.method(#sign, [data]),
            returnValue: _i9.Future<_i16.Uint8List>.value(_i16.Uint8List(0)),
          )
          as _i9.Future<_i16.Uint8List>);

  @override
  _i9.Future<bool> equals(_i10.PrivateKey? other) =>
      (super.noSuchMethod(
            Invocation.method(#equals, [other]),
            returnValue: _i9.Future<bool>.value(false),
          )
          as _i9.Future<bool>);

  @override
  _i16.Uint8List marshal() =>
      (super.noSuchMethod(
            Invocation.method(#marshal, []),
            returnValue: _i16.Uint8List(0),
          )
          as _i16.Uint8List);
}
