// Mocks generated by Mockito 5.4.5 from annotations
// in dart_libp2p/test/host/pstoremanager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:dart_libp2p/core/event/bus.dart' as _i4;
import 'package:dart_libp2p/core/multiaddr.dart' as _i10;
import 'package:dart_libp2p/core/network/conn.dart' as _i8;
import 'package:dart_libp2p/core/network/context.dart' as _i13;
import 'package:dart_libp2p/core/network/network.dart' as _i12;
import 'package:dart_libp2p/core/network/notifiee.dart' as _i14;
import 'package:dart_libp2p/core/network/rcmgr.dart' as _i5;
import 'package:dart_libp2p/core/network/stream.dart' as _i7;
import 'package:dart_libp2p/core/peer/addr_info.dart' as _i3;
import 'package:dart_libp2p/core/peer/peer_id.dart' as _i6;
import 'package:dart_libp2p/core/peerstore.dart' as _i2;
import 'package:dart_libp2p/p2p/discovery/peer_info.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAddrBook_0 extends _i1.SmartFake implements _i2.AddrBook {
  _FakeAddrBook_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKeyBook_1 extends _i1.SmartFake implements _i2.KeyBook {
  _FakeKeyBook_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerMetadata_2 extends _i1.SmartFake implements _i2.PeerMetadata {
  _FakePeerMetadata_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMetrics_3 extends _i1.SmartFake implements _i2.Metrics {
  _FakeMetrics_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProtoBook_4 extends _i1.SmartFake implements _i2.ProtoBook {
  _FakeProtoBook_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddrInfo_5 extends _i1.SmartFake implements _i3.AddrInfo {
  _FakeAddrInfo_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSubscription_6<T> extends _i1.SmartFake
    implements _i4.Subscription<T> {
  _FakeSubscription_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEmitter_7 extends _i1.SmartFake implements _i4.Emitter {
  _FakeEmitter_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResourceManager_8 extends _i1.SmartFake
    implements _i5.ResourceManager {
  _FakeResourceManager_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerstore_9 extends _i1.SmartFake implements _i2.Peerstore {
  _FakePeerstore_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerId_10 extends _i1.SmartFake implements _i6.PeerId {
  _FakePeerId_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeP2PStream_11<T> extends _i1.SmartFake implements _i7.P2PStream<T> {
  _FakeP2PStream_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConn_12 extends _i1.SmartFake implements _i8.Conn {
  _FakeConn_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Peerstore].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeerstore extends _i1.Mock implements _i2.Peerstore {
  MockPeerstore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AddrBook get addrBook =>
      (super.noSuchMethod(
            Invocation.getter(#addrBook),
            returnValue: _FakeAddrBook_0(this, Invocation.getter(#addrBook)),
          )
          as _i2.AddrBook);

  @override
  _i2.KeyBook get keyBook =>
      (super.noSuchMethod(
            Invocation.getter(#keyBook),
            returnValue: _FakeKeyBook_1(this, Invocation.getter(#keyBook)),
          )
          as _i2.KeyBook);

  @override
  _i2.PeerMetadata get peerMetadata =>
      (super.noSuchMethod(
            Invocation.getter(#peerMetadata),
            returnValue: _FakePeerMetadata_2(
              this,
              Invocation.getter(#peerMetadata),
            ),
          )
          as _i2.PeerMetadata);

  @override
  _i2.Metrics get metrics =>
      (super.noSuchMethod(
            Invocation.getter(#metrics),
            returnValue: _FakeMetrics_3(this, Invocation.getter(#metrics)),
          )
          as _i2.Metrics);

  @override
  _i2.ProtoBook get protoBook =>
      (super.noSuchMethod(
            Invocation.getter(#protoBook),
            returnValue: _FakeProtoBook_4(this, Invocation.getter(#protoBook)),
          )
          as _i2.ProtoBook);

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i3.AddrInfo> peerInfo(_i6.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#peerInfo, [id]),
            returnValue: _i9.Future<_i3.AddrInfo>.value(
              _FakeAddrInfo_5(this, Invocation.method(#peerInfo, [id])),
            ),
          )
          as _i9.Future<_i3.AddrInfo>);

  @override
  _i9.Future<List<_i6.PeerId>> peers() =>
      (super.noSuchMethod(
            Invocation.method(#peers, []),
            returnValue: _i9.Future<List<_i6.PeerId>>.value(<_i6.PeerId>[]),
          )
          as _i9.Future<List<_i6.PeerId>>);

  @override
  _i9.Future<void> removePeer(_i6.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#removePeer, [id]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> addOrUpdatePeer(
    _i6.PeerId? peerId, {
    List<_i10.MultiAddr>? addrs,
    List<String>? protocols,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addOrUpdatePeer,
              [peerId],
              {#addrs: addrs, #protocols: protocols, #metadata: metadata},
            ),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i11.PeerInfo?> getPeer(_i6.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#getPeer, [peerId]),
            returnValue: _i9.Future<_i11.PeerInfo?>.value(),
          )
          as _i9.Future<_i11.PeerInfo?>);
}

/// A class which mocks [EventBus].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventBus extends _i1.Mock implements _i4.EventBus {
  MockEventBus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Subscription<dynamic> subscribe(
    Object? eventType, {
    List<_i4.SubscriptionOpt>? opts,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#subscribe, [eventType], {#opts: opts}),
            returnValue: _FakeSubscription_6<dynamic>(
              this,
              Invocation.method(#subscribe, [eventType], {#opts: opts}),
            ),
          )
          as _i4.Subscription<dynamic>);

  @override
  _i9.Future<_i4.Emitter> emitter(
    dynamic eventType, {
    List<_i4.EmitterOpt>? opts,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#emitter, [eventType], {#opts: opts}),
            returnValue: _i9.Future<_i4.Emitter>.value(
              _FakeEmitter_7(
                this,
                Invocation.method(#emitter, [eventType], {#opts: opts}),
              ),
            ),
          )
          as _i9.Future<_i4.Emitter>);

  @override
  List<String> getAllEventTypes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllEventTypes, []),
            returnValue: <String>[],
          )
          as List<String>);
}

/// A class which mocks [Network].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetwork extends _i1.Mock implements _i12.Network {
  MockNetwork() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i10.MultiAddr> get listenAddresses =>
      (super.noSuchMethod(
            Invocation.getter(#listenAddresses),
            returnValue: <_i10.MultiAddr>[],
          )
          as List<_i10.MultiAddr>);

  @override
  _i9.Future<List<_i10.MultiAddr>> get interfaceListenAddresses =>
      (super.noSuchMethod(
            Invocation.getter(#interfaceListenAddresses),
            returnValue: _i9.Future<List<_i10.MultiAddr>>.value(
              <_i10.MultiAddr>[],
            ),
          )
          as _i9.Future<List<_i10.MultiAddr>>);

  @override
  _i5.ResourceManager get resourceManager =>
      (super.noSuchMethod(
            Invocation.getter(#resourceManager),
            returnValue: _FakeResourceManager_8(
              this,
              Invocation.getter(#resourceManager),
            ),
          )
          as _i5.ResourceManager);

  @override
  _i2.Peerstore get peerstore =>
      (super.noSuchMethod(
            Invocation.getter(#peerstore),
            returnValue: _FakePeerstore_9(this, Invocation.getter(#peerstore)),
          )
          as _i2.Peerstore);

  @override
  _i6.PeerId get localPeer =>
      (super.noSuchMethod(
            Invocation.getter(#localPeer),
            returnValue: _FakePeerId_10(this, Invocation.getter(#localPeer)),
          )
          as _i6.PeerId);

  @override
  List<_i6.PeerId> get peers =>
      (super.noSuchMethod(
            Invocation.getter(#peers),
            returnValue: <_i6.PeerId>[],
          )
          as List<_i6.PeerId>);

  @override
  List<_i8.Conn> get conns =>
      (super.noSuchMethod(Invocation.getter(#conns), returnValue: <_i8.Conn>[])
          as List<_i8.Conn>);

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  void setStreamHandler(
    String? protocol,
    _i9.Future<void> Function(dynamic, _i6.PeerId)? handler,
  ) => super.noSuchMethod(
    Invocation.method(#setStreamHandler, [protocol, handler]),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Future<_i7.P2PStream<dynamic>> newStream(
    _i13.Context? context,
    _i6.PeerId? peerId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#newStream, [context, peerId]),
            returnValue: _i9.Future<_i7.P2PStream<dynamic>>.value(
              _FakeP2PStream_11<dynamic>(
                this,
                Invocation.method(#newStream, [context, peerId]),
              ),
            ),
          )
          as _i9.Future<_i7.P2PStream<dynamic>>);

  @override
  _i9.Future<void> listen(List<_i10.MultiAddr>? addrs) =>
      (super.noSuchMethod(
            Invocation.method(#listen, [addrs]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i8.Conn> dialPeer(_i13.Context? context, _i6.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#dialPeer, [context, peerId]),
            returnValue: _i9.Future<_i8.Conn>.value(
              _FakeConn_12(
                this,
                Invocation.method(#dialPeer, [context, peerId]),
              ),
            ),
          )
          as _i9.Future<_i8.Conn>);

  @override
  _i9.Future<void> closePeer(_i6.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#closePeer, [peerId]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i12.Connectedness connectedness(_i6.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#connectedness, [peerId]),
            returnValue: _i12.Connectedness.notConnected,
          )
          as _i12.Connectedness);

  @override
  List<_i8.Conn> connsToPeer(_i6.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#connsToPeer, [peerId]),
            returnValue: <_i8.Conn>[],
          )
          as List<_i8.Conn>);

  @override
  void notify(_i14.Notifiee? notifiee) => super.noSuchMethod(
    Invocation.method(#notify, [notifiee]),
    returnValueForMissingStub: null,
  );

  @override
  void stopNotify(_i14.Notifiee? notifiee) => super.noSuchMethod(
    Invocation.method(#stopNotify, [notifiee]),
    returnValueForMissingStub: null,
  );

  @override
  bool canDial(_i6.PeerId? peerId, _i10.MultiAddr? addr) =>
      (super.noSuchMethod(
            Invocation.method(#canDial, [peerId, addr]),
            returnValue: false,
          )
          as bool);

  @override
  void removeListenAddress(_i10.MultiAddr? addr) => super.noSuchMethod(
    Invocation.method(#removeListenAddress, [addr]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Emitter].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmitter extends _i1.Mock implements _i4.Emitter {
  MockEmitter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> emit(Object? event) =>
      (super.noSuchMethod(
            Invocation.method(#emit, [event]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [Subscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscription<T> extends _i1.Mock implements _i4.Subscription<T> {
  MockSubscription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<T> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i9.Stream<T>.empty(),
          )
          as _i9.Stream<T>);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  _i9.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}
