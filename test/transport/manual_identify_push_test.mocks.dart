// Mocks generated by Mockito 5.4.5 from annotations
// in dart_libp2p/test/transport/manual_identify_push_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;
import 'dart:typed_data' as _i21;

import 'package:dart_libp2p/config/multistream_config.dart' as _i16;
import 'package:dart_libp2p/core/connmgr/conn_manager.dart' as _i7;
import 'package:dart_libp2p/core/crypto/keys.dart' as _i14;
import 'package:dart_libp2p/core/crypto/pb/crypto.pb.dart' as _i15;
import 'package:dart_libp2p/core/event/bus.dart' as _i8;
import 'package:dart_libp2p/core/interfaces.dart' as _i10;
import 'package:dart_libp2p/core/multiaddr.dart' as _i11;
import 'package:dart_libp2p/core/network/common.dart' as _i22;
import 'package:dart_libp2p/core/network/context.dart' as _i18;
import 'package:dart_libp2p/core/network/network.dart' as _i5;
import 'package:dart_libp2p/core/network/rcmgr.dart' as _i12;
import 'package:dart_libp2p/core/network/stream.dart' as _i9;
import 'package:dart_libp2p/core/peer/addr_info.dart' as _i3;
import 'package:dart_libp2p/core/peer/peer_id.dart' as _i4;
import 'package:dart_libp2p/core/peerstore.dart' as _i2;
import 'package:dart_libp2p/core/protocol/protocol.dart' as _i24;
import 'package:dart_libp2p/core/protocol/switch.dart' as _i6;
import 'package:dart_libp2p/p2p/discovery/peer_info.dart' as _i17;
import 'package:dart_libp2p/p2p/multiaddr/protocol.dart' as _i20;
import 'package:dart_libp2p/p2p/protocol/multistream/multistream.dart' as _i23;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i19;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAddrBook_0 extends _i1.SmartFake implements _i2.AddrBook {
  _FakeAddrBook_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKeyBook_1 extends _i1.SmartFake implements _i2.KeyBook {
  _FakeKeyBook_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerMetadata_2 extends _i1.SmartFake implements _i2.PeerMetadata {
  _FakePeerMetadata_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMetrics_3 extends _i1.SmartFake implements _i2.Metrics {
  _FakeMetrics_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProtoBook_4 extends _i1.SmartFake implements _i2.ProtoBook {
  _FakeProtoBook_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddrInfo_5 extends _i1.SmartFake implements _i3.AddrInfo {
  _FakeAddrInfo_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerId_6 extends _i1.SmartFake implements _i4.PeerId {
  _FakePeerId_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerstore_7 extends _i1.SmartFake implements _i2.Peerstore {
  _FakePeerstore_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNetwork_8 extends _i1.SmartFake implements _i5.Network {
  _FakeNetwork_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProtocolSwitch_9 extends _i1.SmartFake
    implements _i6.ProtocolSwitch {
  _FakeProtocolSwitch_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnManager_10 extends _i1.SmartFake implements _i7.ConnManager {
  _FakeConnManager_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEventBus_11 extends _i1.SmartFake implements _i8.EventBus {
  _FakeEventBus_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeP2PStream_12<T> extends _i1.SmartFake implements _i9.P2PStream<T> {
  _FakeP2PStream_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnState_13 extends _i1.SmartFake implements _i10.ConnState {
  _FakeConnState_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMultiAddr_14 extends _i1.SmartFake implements _i11.MultiAddr {
  _FakeMultiAddr_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnStats_15 extends _i1.SmartFake implements _i10.ConnStats {
  _FakeConnStats_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnScope_16 extends _i1.SmartFake implements _i12.ConnScope {
  _FakeConnScope_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSubscription_17<T> extends _i1.SmartFake
    implements _i8.Subscription<T> {
  _FakeSubscription_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEmitter_18 extends _i1.SmartFake implements _i8.Emitter {
  _FakeEmitter_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnManagementScope_19 extends _i1.SmartFake
    implements _i12.ConnManagementScope {
  _FakeConnManagementScope_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamManagementScope_20 extends _i1.SmartFake
    implements _i12.StreamManagementScope {
  _FakeStreamManagementScope_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_21<T1> extends _i1.SmartFake implements _i13.Future<T1> {
  _FakeFuture_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePublicKey_22 extends _i1.SmartFake implements _i14.PublicKey {
  _FakePublicKey_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKeyType_23 extends _i1.SmartFake implements _i15.KeyType {
  _FakeKeyType_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMultistreamConfig_24 extends _i1.SmartFake
    implements _i16.MultistreamConfig {
  _FakeMultistreamConfig_24(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_25 extends _i1.SmartFake implements Duration {
  _FakeDuration_25(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Peerstore].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeerstore extends _i1.Mock implements _i2.Peerstore {
  MockPeerstore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AddrBook get addrBook =>
      (super.noSuchMethod(
            Invocation.getter(#addrBook),
            returnValue: _FakeAddrBook_0(this, Invocation.getter(#addrBook)),
          )
          as _i2.AddrBook);

  @override
  _i2.KeyBook get keyBook =>
      (super.noSuchMethod(
            Invocation.getter(#keyBook),
            returnValue: _FakeKeyBook_1(this, Invocation.getter(#keyBook)),
          )
          as _i2.KeyBook);

  @override
  _i2.PeerMetadata get peerMetadata =>
      (super.noSuchMethod(
            Invocation.getter(#peerMetadata),
            returnValue: _FakePeerMetadata_2(
              this,
              Invocation.getter(#peerMetadata),
            ),
          )
          as _i2.PeerMetadata);

  @override
  _i2.Metrics get metrics =>
      (super.noSuchMethod(
            Invocation.getter(#metrics),
            returnValue: _FakeMetrics_3(this, Invocation.getter(#metrics)),
          )
          as _i2.Metrics);

  @override
  _i2.ProtoBook get protoBook =>
      (super.noSuchMethod(
            Invocation.getter(#protoBook),
            returnValue: _FakeProtoBook_4(this, Invocation.getter(#protoBook)),
          )
          as _i2.ProtoBook);

  @override
  _i13.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<_i3.AddrInfo> peerInfo(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#peerInfo, [id]),
            returnValue: _i13.Future<_i3.AddrInfo>.value(
              _FakeAddrInfo_5(this, Invocation.method(#peerInfo, [id])),
            ),
          )
          as _i13.Future<_i3.AddrInfo>);

  @override
  _i13.Future<List<_i4.PeerId>> peers() =>
      (super.noSuchMethod(
            Invocation.method(#peers, []),
            returnValue: _i13.Future<List<_i4.PeerId>>.value(<_i4.PeerId>[]),
          )
          as _i13.Future<List<_i4.PeerId>>);

  @override
  _i13.Future<void> removePeer(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#removePeer, [id]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<void> addOrUpdatePeer(
    _i4.PeerId? peerId, {
    List<_i11.MultiAddr>? addrs,
    List<String>? protocols,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addOrUpdatePeer,
              [peerId],
              {#addrs: addrs, #protocols: protocols, #metadata: metadata},
            ),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<_i17.PeerInfo?> getPeer(_i4.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#getPeer, [peerId]),
            returnValue: _i13.Future<_i17.PeerInfo?>.value(),
          )
          as _i13.Future<_i17.PeerInfo?>);
}

/// A class which mocks [Host].
///
/// See the documentation for Mockito's code generation for more information.
class MockHost extends _i1.Mock implements _i10.Host {
  MockHost() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.PeerId get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _FakePeerId_6(this, Invocation.getter(#id)),
          )
          as _i4.PeerId);

  @override
  _i2.Peerstore get peerStore =>
      (super.noSuchMethod(
            Invocation.getter(#peerStore),
            returnValue: _FakePeerstore_7(this, Invocation.getter(#peerStore)),
          )
          as _i2.Peerstore);

  @override
  List<_i11.MultiAddr> get addrs =>
      (super.noSuchMethod(
            Invocation.getter(#addrs),
            returnValue: <_i11.MultiAddr>[],
          )
          as List<_i11.MultiAddr>);

  @override
  _i5.Network get network =>
      (super.noSuchMethod(
            Invocation.getter(#network),
            returnValue: _FakeNetwork_8(this, Invocation.getter(#network)),
          )
          as _i5.Network);

  @override
  _i6.ProtocolSwitch get mux =>
      (super.noSuchMethod(
            Invocation.getter(#mux),
            returnValue: _FakeProtocolSwitch_9(this, Invocation.getter(#mux)),
          )
          as _i6.ProtocolSwitch);

  @override
  _i7.ConnManager get connManager =>
      (super.noSuchMethod(
            Invocation.getter(#connManager),
            returnValue: _FakeConnManager_10(
              this,
              Invocation.getter(#connManager),
            ),
          )
          as _i7.ConnManager);

  @override
  _i8.EventBus get eventBus =>
      (super.noSuchMethod(
            Invocation.getter(#eventBus),
            returnValue: _FakeEventBus_11(this, Invocation.getter(#eventBus)),
          )
          as _i8.EventBus);

  @override
  _i13.Future<void> connect(_i3.AddrInfo? pi, {_i18.Context? context}) =>
      (super.noSuchMethod(
            Invocation.method(#connect, [pi], {#context: context}),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  void setStreamHandler(String? pid, _i5.StreamHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(#setStreamHandler, [pid, handler]),
        returnValueForMissingStub: null,
      );

  @override
  void setStreamHandlerMatch(
    String? pid,
    bool Function(String)? match,
    _i5.StreamHandler? handler,
  ) => super.noSuchMethod(
    Invocation.method(#setStreamHandlerMatch, [pid, match, handler]),
    returnValueForMissingStub: null,
  );

  @override
  void removeStreamHandler(String? pid) => super.noSuchMethod(
    Invocation.method(#removeStreamHandler, [pid]),
    returnValueForMissingStub: null,
  );

  @override
  _i13.Future<_i9.P2PStream<dynamic>> newStream(
    _i4.PeerId? p,
    List<String>? pids,
    _i18.Context? context,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#newStream, [p, pids, context]),
            returnValue: _i13.Future<_i9.P2PStream<dynamic>>.value(
              _FakeP2PStream_12<dynamic>(
                this,
                Invocation.method(#newStream, [p, pids, context]),
              ),
            ),
          )
          as _i13.Future<_i9.P2PStream<dynamic>>);

  @override
  _i13.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<void> start() =>
      (super.noSuchMethod(
            Invocation.method(#start, []),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);
}

/// A class which mocks [Conn].
///
/// See the documentation for Mockito's code generation for more information.
class MockConn extends _i1.Mock implements _i10.Conn {
  MockConn() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i19.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i13.Future<List<_i9.P2PStream<dynamic>>> get streams =>
      (super.noSuchMethod(
            Invocation.getter(#streams),
            returnValue: _i13.Future<List<_i9.P2PStream<dynamic>>>.value(
              <_i9.P2PStream<dynamic>>[],
            ),
          )
          as _i13.Future<List<_i9.P2PStream<dynamic>>>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i4.PeerId get localPeer =>
      (super.noSuchMethod(
            Invocation.getter(#localPeer),
            returnValue: _FakePeerId_6(this, Invocation.getter(#localPeer)),
          )
          as _i4.PeerId);

  @override
  _i4.PeerId get remotePeer =>
      (super.noSuchMethod(
            Invocation.getter(#remotePeer),
            returnValue: _FakePeerId_6(this, Invocation.getter(#remotePeer)),
          )
          as _i4.PeerId);

  @override
  _i13.Future<_i14.PublicKey?> get remotePublicKey =>
      (super.noSuchMethod(
            Invocation.getter(#remotePublicKey),
            returnValue: _i13.Future<_i14.PublicKey?>.value(),
          )
          as _i13.Future<_i14.PublicKey?>);

  @override
  _i10.ConnState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeConnState_13(this, Invocation.getter(#state)),
          )
          as _i10.ConnState);

  @override
  _i11.MultiAddr get localMultiaddr =>
      (super.noSuchMethod(
            Invocation.getter(#localMultiaddr),
            returnValue: _FakeMultiAddr_14(
              this,
              Invocation.getter(#localMultiaddr),
            ),
          )
          as _i11.MultiAddr);

  @override
  _i11.MultiAddr get remoteMultiaddr =>
      (super.noSuchMethod(
            Invocation.getter(#remoteMultiaddr),
            returnValue: _FakeMultiAddr_14(
              this,
              Invocation.getter(#remoteMultiaddr),
            ),
          )
          as _i11.MultiAddr);

  @override
  _i10.ConnStats get stat =>
      (super.noSuchMethod(
            Invocation.getter(#stat),
            returnValue: _FakeConnStats_15(this, Invocation.getter(#stat)),
          )
          as _i10.ConnStats);

  @override
  _i12.ConnScope get scope =>
      (super.noSuchMethod(
            Invocation.getter(#scope),
            returnValue: _FakeConnScope_16(this, Invocation.getter(#scope)),
          )
          as _i12.ConnScope);

  @override
  _i13.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<_i9.P2PStream<dynamic>> newStream(_i18.Context? context) =>
      (super.noSuchMethod(
            Invocation.method(#newStream, [context]),
            returnValue: _i13.Future<_i9.P2PStream<dynamic>>.value(
              _FakeP2PStream_12<dynamic>(
                this,
                Invocation.method(#newStream, [context]),
              ),
            ),
          )
          as _i13.Future<_i9.P2PStream<dynamic>>);
}

/// A class which mocks [EventBus].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventBus extends _i1.Mock implements _i8.EventBus {
  MockEventBus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Subscription<dynamic> subscribe(
    Object? eventType, {
    List<_i8.SubscriptionOpt>? opts,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#subscribe, [eventType], {#opts: opts}),
            returnValue: _FakeSubscription_17<dynamic>(
              this,
              Invocation.method(#subscribe, [eventType], {#opts: opts}),
            ),
          )
          as _i8.Subscription<dynamic>);

  @override
  _i13.Future<_i8.Emitter> emitter(
    dynamic eventType, {
    List<_i8.EmitterOpt>? opts,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#emitter, [eventType], {#opts: opts}),
            returnValue: _i13.Future<_i8.Emitter>.value(
              _FakeEmitter_18(
                this,
                Invocation.method(#emitter, [eventType], {#opts: opts}),
              ),
            ),
          )
          as _i13.Future<_i8.Emitter>);

  @override
  List<String> getAllEventTypes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllEventTypes, []),
            returnValue: <String>[],
          )
          as List<String>);
}

/// A class which mocks [PeerMetadata].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeerMetadata extends _i1.Mock implements _i2.PeerMetadata {
  MockPeerMetadata() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic get(_i4.PeerId? p, String? key) =>
      super.noSuchMethod(Invocation.method(#get, [p, key]));

  @override
  void put(_i4.PeerId? p, String? key, dynamic val) => super.noSuchMethod(
    Invocation.method(#put, [p, key, val]),
    returnValueForMissingStub: null,
  );

  @override
  _i13.Future<void> removePeer(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#removePeer, [id]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<Map<String, dynamic>?> getAll(_i4.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#getAll, [peerId]),
            returnValue: _i13.Future<Map<String, dynamic>?>.value(),
          )
          as _i13.Future<Map<String, dynamic>?>);
}

/// A class which mocks [AddrBook].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddrBook extends _i1.Mock implements _i2.AddrBook {
  MockAddrBook() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<void> addAddr(
    _i4.PeerId? p,
    _i11.MultiAddr? addr,
    Duration? ttl,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addAddr, [p, addr, ttl]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<void> addAddrs(
    _i4.PeerId? p,
    List<_i11.MultiAddr>? addrs,
    Duration? ttl,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addAddrs, [p, addrs, ttl]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<void> setAddr(
    _i4.PeerId? p,
    _i11.MultiAddr? addr,
    Duration? ttl,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setAddr, [p, addr, ttl]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<void> setAddrs(
    _i4.PeerId? p,
    List<_i11.MultiAddr>? addrs,
    Duration? ttl,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setAddrs, [p, addrs, ttl]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<void> updateAddrs(
    _i4.PeerId? p,
    Duration? oldTTL,
    Duration? newTTL,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAddrs, [p, oldTTL, newTTL]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<List<_i11.MultiAddr>> addrs(_i4.PeerId? p) =>
      (super.noSuchMethod(
            Invocation.method(#addrs, [p]),
            returnValue: _i13.Future<List<_i11.MultiAddr>>.value(
              <_i11.MultiAddr>[],
            ),
          )
          as _i13.Future<List<_i11.MultiAddr>>);

  @override
  _i13.Future<_i13.Stream<_i11.MultiAddr>> addrStream(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#addrStream, [id]),
            returnValue: _i13.Future<_i13.Stream<_i11.MultiAddr>>.value(
              _i13.Stream<_i11.MultiAddr>.empty(),
            ),
          )
          as _i13.Future<_i13.Stream<_i11.MultiAddr>>);

  @override
  _i13.Future<void> clearAddrs(_i4.PeerId? p) =>
      (super.noSuchMethod(
            Invocation.method(#clearAddrs, [p]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<List<_i4.PeerId>> peersWithAddrs() =>
      (super.noSuchMethod(
            Invocation.method(#peersWithAddrs, []),
            returnValue: _i13.Future<List<_i4.PeerId>>.value(<_i4.PeerId>[]),
          )
          as _i13.Future<List<_i4.PeerId>>);
}

/// A class which mocks [ProtoBook].
///
/// See the documentation for Mockito's code generation for more information.
class MockProtoBook extends _i1.Mock implements _i2.ProtoBook {
  MockProtoBook() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<List<String>> getProtocols(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProtocols, [id]),
            returnValue: _i13.Future<List<String>>.value(<String>[]),
          )
          as _i13.Future<List<String>>);

  @override
  void addProtocols(_i4.PeerId? id, List<String>? protocols) =>
      super.noSuchMethod(
        Invocation.method(#addProtocols, [id, protocols]),
        returnValueForMissingStub: null,
      );

  @override
  void setProtocols(_i4.PeerId? id, List<String>? protocols) =>
      super.noSuchMethod(
        Invocation.method(#setProtocols, [id, protocols]),
        returnValueForMissingStub: null,
      );

  @override
  void removeProtocols(_i4.PeerId? id, List<String>? protocols) =>
      super.noSuchMethod(
        Invocation.method(#removeProtocols, [id, protocols]),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<List<String>> supportsProtocols(
    _i4.PeerId? id,
    List<String>? protocols,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#supportsProtocols, [id, protocols]),
            returnValue: _i13.Future<List<String>>.value(<String>[]),
          )
          as _i13.Future<List<String>>);

  @override
  _i13.Future<String?> firstSupportedProtocol(
    _i4.PeerId? id,
    List<String>? protocols,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#firstSupportedProtocol, [id, protocols]),
            returnValue: _i13.Future<String?>.value(),
          )
          as _i13.Future<String?>);

  @override
  void removePeer(_i4.PeerId? id) => super.noSuchMethod(
    Invocation.method(#removePeer, [id]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [MultiAddr].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultiAddr extends _i1.Mock implements _i11.MultiAddr {
  MockMultiAddr() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i20.Protocol> get protocols =>
      (super.noSuchMethod(
            Invocation.getter(#protocols),
            returnValue: <_i20.Protocol>[],
          )
          as List<_i20.Protocol>);

  @override
  List<String> get values =>
      (super.noSuchMethod(Invocation.getter(#values), returnValue: <String>[])
          as List<String>);

  @override
  List<(_i20.Protocol, String)> get components =>
      (super.noSuchMethod(
            Invocation.getter(#components),
            returnValue: <(_i20.Protocol, String)>[],
          )
          as List<(_i20.Protocol, String)>);

  @override
  bool get hasUdx =>
      (super.noSuchMethod(Invocation.getter(#hasUdx), returnValue: false)
          as bool);

  @override
  bool get hasQuicV1 =>
      (super.noSuchMethod(Invocation.getter(#hasQuicV1), returnValue: false)
          as bool);

  @override
  bool get hasWebtransport =>
      (super.noSuchMethod(
            Invocation.getter(#hasWebtransport),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasCircuit =>
      (super.noSuchMethod(Invocation.getter(#hasCircuit), returnValue: false)
          as bool);

  @override
  List<String> get transports =>
      (super.noSuchMethod(
            Invocation.getter(#transports),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i21.Uint8List toBytes() =>
      (super.noSuchMethod(
            Invocation.method(#toBytes, []),
            returnValue: _i21.Uint8List(0),
          )
          as _i21.Uint8List);

  @override
  bool hasProtocol(String? protocol) =>
      (super.noSuchMethod(
            Invocation.method(#hasProtocol, [protocol]),
            returnValue: false,
          )
          as bool);

  @override
  String? valueForProtocol(String? protocol) =>
      (super.noSuchMethod(Invocation.method(#valueForProtocol, [protocol]))
          as String?);

  @override
  _i11.MultiAddr encapsulate(String? protocolName, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#encapsulate, [protocolName, value]),
            returnValue: _FakeMultiAddr_14(
              this,
              Invocation.method(#encapsulate, [protocolName, value]),
            ),
          )
          as _i11.MultiAddr);

  @override
  _i11.MultiAddr? decapsulate(String? protocol) =>
      (super.noSuchMethod(Invocation.method(#decapsulate, [protocol]))
          as _i11.MultiAddr?);

  @override
  bool equals(_i11.MultiAddr? addr) =>
      (super.noSuchMethod(
            Invocation.method(#equals, [addr]),
            returnValue: false,
          )
          as bool);

  @override
  bool isLoopback() =>
      (super.noSuchMethod(
            Invocation.method(#isLoopback, []),
            returnValue: false,
          )
          as bool);

  @override
  bool isPrivate() =>
      (super.noSuchMethod(Invocation.method(#isPrivate, []), returnValue: false)
          as bool);

  @override
  bool isPublic() =>
      (super.noSuchMethod(Invocation.method(#isPublic, []), returnValue: false)
          as bool);
}

/// A class which mocks [ResourceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockResourceManager extends _i1.Mock implements _i12.ResourceManager {
  MockResourceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i12.ConnManagementScope> openConnection(
    _i22.Direction? dir,
    bool? usefd,
    _i11.MultiAddr? endpoint,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#openConnection, [dir, usefd, endpoint]),
            returnValue: _i13.Future<_i12.ConnManagementScope>.value(
              _FakeConnManagementScope_19(
                this,
                Invocation.method(#openConnection, [dir, usefd, endpoint]),
              ),
            ),
          )
          as _i13.Future<_i12.ConnManagementScope>);

  @override
  _i13.Future<_i12.StreamManagementScope> openStream(
    _i4.PeerId? peerId,
    _i22.Direction? dir,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#openStream, [peerId, dir]),
            returnValue: _i13.Future<_i12.StreamManagementScope>.value(
              _FakeStreamManagementScope_20(
                this,
                Invocation.method(#openStream, [peerId, dir]),
              ),
            ),
          )
          as _i13.Future<_i12.StreamManagementScope>);

  @override
  _i13.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<T> viewSystem<T>(
    _i13.Future<T> Function(_i12.ResourceScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewSystem, [f]),
            returnValue:
                _i19.ifNotNull(
                  _i19.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewSystem, [f]),
                  ),
                  (T v) => _i13.Future<T>.value(v),
                ) ??
                _FakeFuture_21<T>(this, Invocation.method(#viewSystem, [f])),
          )
          as _i13.Future<T>);

  @override
  _i13.Future<T> viewTransient<T>(
    _i13.Future<T> Function(_i12.ResourceScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewTransient, [f]),
            returnValue:
                _i19.ifNotNull(
                  _i19.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewTransient, [f]),
                  ),
                  (T v) => _i13.Future<T>.value(v),
                ) ??
                _FakeFuture_21<T>(this, Invocation.method(#viewTransient, [f])),
          )
          as _i13.Future<T>);

  @override
  _i13.Future<T> viewService<T>(
    String? service,
    _i13.Future<T> Function(_i12.ServiceScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewService, [service, f]),
            returnValue:
                _i19.ifNotNull(
                  _i19.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewService, [service, f]),
                  ),
                  (T v) => _i13.Future<T>.value(v),
                ) ??
                _FakeFuture_21<T>(
                  this,
                  Invocation.method(#viewService, [service, f]),
                ),
          )
          as _i13.Future<T>);

  @override
  _i13.Future<T> viewProtocol<T>(
    String? protocol,
    _i13.Future<T> Function(_i12.ProtocolScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewProtocol, [protocol, f]),
            returnValue:
                _i19.ifNotNull(
                  _i19.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewProtocol, [protocol, f]),
                  ),
                  (T v) => _i13.Future<T>.value(v),
                ) ??
                _FakeFuture_21<T>(
                  this,
                  Invocation.method(#viewProtocol, [protocol, f]),
                ),
          )
          as _i13.Future<T>);

  @override
  _i13.Future<T> viewPeer<T>(
    _i4.PeerId? peerId,
    _i13.Future<T> Function(_i12.PeerScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewPeer, [peerId, f]),
            returnValue:
                _i19.ifNotNull(
                  _i19.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewPeer, [peerId, f]),
                  ),
                  (T v) => _i13.Future<T>.value(v),
                ) ??
                _FakeFuture_21<T>(
                  this,
                  Invocation.method(#viewPeer, [peerId, f]),
                ),
          )
          as _i13.Future<T>);
}

/// A class which mocks [KeyBook].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyBook extends _i1.Mock implements _i2.KeyBook {
  MockKeyBook() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i14.PublicKey?> pubKey(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#pubKey, [id]),
            returnValue: _i13.Future<_i14.PublicKey?>.value(),
          )
          as _i13.Future<_i14.PublicKey?>);

  @override
  void addPubKey(_i4.PeerId? id, _i14.PublicKey? pk) => super.noSuchMethod(
    Invocation.method(#addPubKey, [id, pk]),
    returnValueForMissingStub: null,
  );

  @override
  _i13.Future<_i14.PrivateKey?> privKey(_i4.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#privKey, [id]),
            returnValue: _i13.Future<_i14.PrivateKey?>.value(),
          )
          as _i13.Future<_i14.PrivateKey?>);

  @override
  void addPrivKey(_i4.PeerId? id, _i14.PrivateKey? sk) => super.noSuchMethod(
    Invocation.method(#addPrivKey, [id, sk]),
    returnValueForMissingStub: null,
  );

  @override
  _i13.Future<List<_i4.PeerId>> peersWithKeys() =>
      (super.noSuchMethod(
            Invocation.method(#peersWithKeys, []),
            returnValue: _i13.Future<List<_i4.PeerId>>.value(<_i4.PeerId>[]),
          )
          as _i13.Future<List<_i4.PeerId>>);

  @override
  void removePeer(_i4.PeerId? id) => super.noSuchMethod(
    Invocation.method(#removePeer, [id]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PrivateKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrivateKey extends _i1.Mock implements _i14.PrivateKey {
  MockPrivateKey() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.PublicKey get publicKey =>
      (super.noSuchMethod(
            Invocation.getter(#publicKey),
            returnValue: _FakePublicKey_22(this, Invocation.getter(#publicKey)),
          )
          as _i14.PublicKey);

  @override
  _i15.KeyType get type =>
      (super.noSuchMethod(
            Invocation.getter(#type),
            returnValue: _FakeKeyType_23(this, Invocation.getter(#type)),
          )
          as _i15.KeyType);

  @override
  _i21.Uint8List get raw =>
      (super.noSuchMethod(
            Invocation.getter(#raw),
            returnValue: _i21.Uint8List(0),
          )
          as _i21.Uint8List);

  @override
  _i13.Future<_i21.Uint8List> sign(_i21.Uint8List? data) =>
      (super.noSuchMethod(
            Invocation.method(#sign, [data]),
            returnValue: _i13.Future<_i21.Uint8List>.value(_i21.Uint8List(0)),
          )
          as _i13.Future<_i21.Uint8List>);

  @override
  _i13.Future<bool> equals(_i14.PrivateKey? other) =>
      (super.noSuchMethod(
            Invocation.method(#equals, [other]),
            returnValue: _i13.Future<bool>.value(false),
          )
          as _i13.Future<bool>);

  @override
  _i21.Uint8List marshal() =>
      (super.noSuchMethod(
            Invocation.method(#marshal, []),
            returnValue: _i21.Uint8List(0),
          )
          as _i21.Uint8List);
}

/// A class which mocks [MultistreamMuxer].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultistreamMuxer extends _i1.Mock implements _i23.MultistreamMuxer {
  MockMultistreamMuxer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.MultistreamConfig get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeMultistreamConfig_24(
              this,
              Invocation.getter(#config),
            ),
          )
          as _i16.MultistreamConfig);

  @override
  Duration get readTimeout =>
      (super.noSuchMethod(
            Invocation.getter(#readTimeout),
            returnValue: _FakeDuration_25(
              this,
              Invocation.getter(#readTimeout),
            ),
          )
          as Duration);

  @override
  int get maxRetries =>
      (super.noSuchMethod(Invocation.getter(#maxRetries), returnValue: 0)
          as int);

  @override
  void addHandler(String? protocol, _i24.HandlerFunc? handler) =>
      super.noSuchMethod(
        Invocation.method(#addHandler, [protocol, handler]),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> addHandlerWithFunc(
    String? protocol,
    bool Function(String)? match,
    _i24.HandlerFunc? handler,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addHandlerWithFunc, [protocol, match, handler]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  void removeHandler(String? protocol) => super.noSuchMethod(
    Invocation.method(#removeHandler, [protocol]),
    returnValueForMissingStub: null,
  );

  @override
  _i13.Future<List<String>> protocols() =>
      (super.noSuchMethod(
            Invocation.method(#protocols, []),
            returnValue: _i13.Future<List<String>>.value(<String>[]),
          )
          as _i13.Future<List<String>>);

  @override
  _i13.Future<(String, _i24.HandlerFunc)> negotiate(
    _i9.P2PStream<dynamic>? stream,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#negotiate, [stream]),
            returnValue: _i13.Future<(String, _i24.HandlerFunc)>.value((
              _i19.dummyValue<String>(
                this,
                Invocation.method(#negotiate, [stream]),
              ),
              (String protocol, _i9.P2PStream<dynamic> stream) {},
            )),
          )
          as _i13.Future<(String, _i24.HandlerFunc)>);

  @override
  _i13.Future<void> handle(_i9.P2PStream<dynamic>? stream) =>
      (super.noSuchMethod(
            Invocation.method(#handle, [stream]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<String?> selectOneOf(
    _i9.P2PStream<dynamic>? stream,
    List<String>? protocolsToSelect,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#selectOneOf, [stream, protocolsToSelect]),
            returnValue: _i13.Future<String?>.value(),
          )
          as _i13.Future<String?>);
}

/// A class which mocks [Emitter].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmitter extends _i1.Mock implements _i8.Emitter {
  MockEmitter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<void> emit(Object? event) =>
      (super.noSuchMethod(
            Invocation.method(#emit, [event]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);
}
