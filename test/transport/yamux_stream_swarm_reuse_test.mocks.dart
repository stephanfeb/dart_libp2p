// Mocks generated by Mockito 5.4.5 from annotations
// in dart_libp2p/test/transport/yamux_stream_swarm_reuse_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i10;
import 'dart:typed_data' as _i19;

import 'package:dart_libp2p/core/crypto/keys.dart' as _i18;
import 'package:dart_libp2p/core/multiaddr.dart' as _i9;
import 'package:dart_libp2p/core/network/common.dart' as _i13;
import 'package:dart_libp2p/core/network/conn.dart' as _i7;
import 'package:dart_libp2p/core/network/context.dart' as _i20;
import 'package:dart_libp2p/core/network/rcmgr.dart' as _i2;
import 'package:dart_libp2p/core/network/stream.dart' as _i12;
import 'package:dart_libp2p/core/network/transport_conn.dart' as _i17;
import 'package:dart_libp2p/core/peer/addr_info.dart' as _i5;
import 'package:dart_libp2p/core/peer/peer_id.dart' as _i11;
import 'package:dart_libp2p/core/peerstore.dart' as _i4;
import 'package:dart_libp2p/p2p/discovery/peer_info.dart' as _i15;
import 'package:dart_libp2p/p2p/transport/listener.dart' as _i8;
import 'package:dart_libp2p/p2p/transport/transport.dart' as _i16;
import 'package:dart_libp2p/p2p/transport/transport_config.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConnManagementScope_0 extends _i1.SmartFake
    implements _i2.ConnManagementScope {
  _FakeConnManagementScope_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamManagementScope_1 extends _i1.SmartFake
    implements _i2.StreamManagementScope {
  _FakeStreamManagementScope_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_2<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddrBook_3 extends _i1.SmartFake implements _i4.AddrBook {
  _FakeAddrBook_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKeyBook_4 extends _i1.SmartFake implements _i4.KeyBook {
  _FakeKeyBook_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerMetadata_5 extends _i1.SmartFake implements _i4.PeerMetadata {
  _FakePeerMetadata_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMetrics_6 extends _i1.SmartFake implements _i4.Metrics {
  _FakeMetrics_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProtoBook_7 extends _i1.SmartFake implements _i4.ProtoBook {
  _FakeProtoBook_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddrInfo_8 extends _i1.SmartFake implements _i5.AddrInfo {
  _FakeAddrInfo_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTransportConfig_9 extends _i1.SmartFake
    implements _i6.TransportConfig {
  _FakeTransportConfig_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConn_10 extends _i1.SmartFake implements _i7.Conn {
  _FakeConn_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeListener_11 extends _i1.SmartFake implements _i8.Listener {
  _FakeListener_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMultiAddr_12 extends _i1.SmartFake implements _i9.MultiAddr {
  _FakeMultiAddr_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSocket_13 extends _i1.SmartFake implements _i10.Socket {
  _FakeSocket_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerId_14 extends _i1.SmartFake implements _i11.PeerId {
  _FakePeerId_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnState_15 extends _i1.SmartFake implements _i7.ConnState {
  _FakeConnState_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnStats_16 extends _i1.SmartFake implements _i7.ConnStats {
  _FakeConnStats_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnScope_17 extends _i1.SmartFake implements _i2.ConnScope {
  _FakeConnScope_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeP2PStream_18<T> extends _i1.SmartFake implements _i12.P2PStream<T> {
  _FakeP2PStream_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeScopeStat_19 extends _i1.SmartFake implements _i2.ScopeStat {
  _FakeScopeStat_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResourceScopeSpan_20 extends _i1.SmartFake
    implements _i2.ResourceScopeSpan {
  _FakeResourceScopeSpan_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerScope_21 extends _i1.SmartFake implements _i2.PeerScope {
  _FakePeerScope_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ResourceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockResourceManager extends _i1.Mock implements _i2.ResourceManager {
  MockResourceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.ConnManagementScope> openConnection(
    _i13.Direction? dir,
    bool? usefd,
    _i9.MultiAddr? endpoint,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#openConnection, [dir, usefd, endpoint]),
            returnValue: _i3.Future<_i2.ConnManagementScope>.value(
              _FakeConnManagementScope_0(
                this,
                Invocation.method(#openConnection, [dir, usefd, endpoint]),
              ),
            ),
          )
          as _i3.Future<_i2.ConnManagementScope>);

  @override
  _i3.Future<_i2.StreamManagementScope> openStream(
    _i11.PeerId? peerId,
    _i13.Direction? dir,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#openStream, [peerId, dir]),
            returnValue: _i3.Future<_i2.StreamManagementScope>.value(
              _FakeStreamManagementScope_1(
                this,
                Invocation.method(#openStream, [peerId, dir]),
              ),
            ),
          )
          as _i3.Future<_i2.StreamManagementScope>);

  @override
  _i3.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<T> viewSystem<T>(_i3.Future<T> Function(_i2.ResourceScope)? f) =>
      (super.noSuchMethod(
            Invocation.method(#viewSystem, [f]),
            returnValue:
                _i14.ifNotNull(
                  _i14.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewSystem, [f]),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(this, Invocation.method(#viewSystem, [f])),
          )
          as _i3.Future<T>);

  @override
  _i3.Future<T> viewTransient<T>(
    _i3.Future<T> Function(_i2.ResourceScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewTransient, [f]),
            returnValue:
                _i14.ifNotNull(
                  _i14.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewTransient, [f]),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(this, Invocation.method(#viewTransient, [f])),
          )
          as _i3.Future<T>);

  @override
  _i3.Future<T> viewService<T>(
    String? service,
    _i3.Future<T> Function(_i2.ServiceScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewService, [service, f]),
            returnValue:
                _i14.ifNotNull(
                  _i14.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewService, [service, f]),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(
                  this,
                  Invocation.method(#viewService, [service, f]),
                ),
          )
          as _i3.Future<T>);

  @override
  _i3.Future<T> viewProtocol<T>(
    String? protocol,
    _i3.Future<T> Function(_i2.ProtocolScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewProtocol, [protocol, f]),
            returnValue:
                _i14.ifNotNull(
                  _i14.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewProtocol, [protocol, f]),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(
                  this,
                  Invocation.method(#viewProtocol, [protocol, f]),
                ),
          )
          as _i3.Future<T>);

  @override
  _i3.Future<T> viewPeer<T>(
    _i11.PeerId? peerId,
    _i3.Future<T> Function(_i2.PeerScope)? f,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#viewPeer, [peerId, f]),
            returnValue:
                _i14.ifNotNull(
                  _i14.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#viewPeer, [peerId, f]),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(
                  this,
                  Invocation.method(#viewPeer, [peerId, f]),
                ),
          )
          as _i3.Future<T>);
}

/// A class which mocks [Peerstore].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeerstore extends _i1.Mock implements _i4.Peerstore {
  MockPeerstore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AddrBook get addrBook =>
      (super.noSuchMethod(
            Invocation.getter(#addrBook),
            returnValue: _FakeAddrBook_3(this, Invocation.getter(#addrBook)),
          )
          as _i4.AddrBook);

  @override
  _i4.KeyBook get keyBook =>
      (super.noSuchMethod(
            Invocation.getter(#keyBook),
            returnValue: _FakeKeyBook_4(this, Invocation.getter(#keyBook)),
          )
          as _i4.KeyBook);

  @override
  _i4.PeerMetadata get peerMetadata =>
      (super.noSuchMethod(
            Invocation.getter(#peerMetadata),
            returnValue: _FakePeerMetadata_5(
              this,
              Invocation.getter(#peerMetadata),
            ),
          )
          as _i4.PeerMetadata);

  @override
  _i4.Metrics get metrics =>
      (super.noSuchMethod(
            Invocation.getter(#metrics),
            returnValue: _FakeMetrics_6(this, Invocation.getter(#metrics)),
          )
          as _i4.Metrics);

  @override
  _i4.ProtoBook get protoBook =>
      (super.noSuchMethod(
            Invocation.getter(#protoBook),
            returnValue: _FakeProtoBook_7(this, Invocation.getter(#protoBook)),
          )
          as _i4.ProtoBook);

  @override
  _i3.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i5.AddrInfo> peerInfo(_i11.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#peerInfo, [id]),
            returnValue: _i3.Future<_i5.AddrInfo>.value(
              _FakeAddrInfo_8(this, Invocation.method(#peerInfo, [id])),
            ),
          )
          as _i3.Future<_i5.AddrInfo>);

  @override
  _i3.Future<List<_i11.PeerId>> peers() =>
      (super.noSuchMethod(
            Invocation.method(#peers, []),
            returnValue: _i3.Future<List<_i11.PeerId>>.value(<_i11.PeerId>[]),
          )
          as _i3.Future<List<_i11.PeerId>>);

  @override
  _i3.Future<void> removePeer(_i11.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#removePeer, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> addOrUpdatePeer(
    _i11.PeerId? peerId, {
    List<_i9.MultiAddr>? addrs,
    List<String>? protocols,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addOrUpdatePeer,
              [peerId],
              {#addrs: addrs, #protocols: protocols, #metadata: metadata},
            ),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i15.PeerInfo?> getPeer(_i11.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#getPeer, [peerId]),
            returnValue: _i3.Future<_i15.PeerInfo?>.value(),
          )
          as _i3.Future<_i15.PeerInfo?>);
}

/// A class which mocks [Transport].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransport extends _i1.Mock implements _i16.Transport {
  MockTransport() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.TransportConfig get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeTransportConfig_9(
              this,
              Invocation.getter(#config),
            ),
          )
          as _i6.TransportConfig);

  @override
  List<String> get protocols =>
      (super.noSuchMethod(
            Invocation.getter(#protocols),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i3.Future<_i7.Conn> dial(_i9.MultiAddr? addr, {Duration? timeout}) =>
      (super.noSuchMethod(
            Invocation.method(#dial, [addr], {#timeout: timeout}),
            returnValue: _i3.Future<_i7.Conn>.value(
              _FakeConn_10(
                this,
                Invocation.method(#dial, [addr], {#timeout: timeout}),
              ),
            ),
          )
          as _i3.Future<_i7.Conn>);

  @override
  _i3.Future<_i8.Listener> listen(_i9.MultiAddr? addr) =>
      (super.noSuchMethod(
            Invocation.method(#listen, [addr]),
            returnValue: _i3.Future<_i8.Listener>.value(
              _FakeListener_11(this, Invocation.method(#listen, [addr])),
            ),
          )
          as _i3.Future<_i8.Listener>);

  @override
  bool canDial(_i9.MultiAddr? addr) =>
      (super.noSuchMethod(
            Invocation.method(#canDial, [addr]),
            returnValue: false,
          )
          as bool);

  @override
  bool canListen(_i9.MultiAddr? addr) =>
      (super.noSuchMethod(
            Invocation.method(#canListen, [addr]),
            returnValue: false,
          )
          as bool);

  @override
  _i3.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [Listener].
///
/// See the documentation for Mockito's code generation for more information.
class MockListener extends _i1.Mock implements _i8.Listener {
  MockListener() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.MultiAddr get addr =>
      (super.noSuchMethod(
            Invocation.getter(#addr),
            returnValue: _FakeMultiAddr_12(this, Invocation.getter(#addr)),
          )
          as _i9.MultiAddr);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i3.Stream<_i17.TransportConn> get connectionStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStream),
            returnValue: _i3.Stream<_i17.TransportConn>.empty(),
          )
          as _i3.Stream<_i17.TransportConn>);

  @override
  _i3.Future<_i17.TransportConn?> accept() =>
      (super.noSuchMethod(
            Invocation.method(#accept, []),
            returnValue: _i3.Future<_i17.TransportConn?>.value(),
          )
          as _i3.Future<_i17.TransportConn?>);

  @override
  _i3.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  bool supportsAddr(_i9.MultiAddr? addr) =>
      (super.noSuchMethod(
            Invocation.method(#supportsAddr, [addr]),
            returnValue: false,
          )
          as bool);
}

/// A class which mocks [TransportConn].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransportConn extends _i1.Mock implements _i17.TransportConn {
  MockTransportConn() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Socket get socket =>
      (super.noSuchMethod(
            Invocation.getter(#socket),
            returnValue: _FakeSocket_13(this, Invocation.getter(#socket)),
          )
          as _i10.Socket);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i14.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i3.Future<List<_i12.P2PStream<dynamic>>> get streams =>
      (super.noSuchMethod(
            Invocation.getter(#streams),
            returnValue: _i3.Future<List<_i12.P2PStream<dynamic>>>.value(
              <_i12.P2PStream<dynamic>>[],
            ),
          )
          as _i3.Future<List<_i12.P2PStream<dynamic>>>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i11.PeerId get localPeer =>
      (super.noSuchMethod(
            Invocation.getter(#localPeer),
            returnValue: _FakePeerId_14(this, Invocation.getter(#localPeer)),
          )
          as _i11.PeerId);

  @override
  _i11.PeerId get remotePeer =>
      (super.noSuchMethod(
            Invocation.getter(#remotePeer),
            returnValue: _FakePeerId_14(this, Invocation.getter(#remotePeer)),
          )
          as _i11.PeerId);

  @override
  _i3.Future<_i18.PublicKey?> get remotePublicKey =>
      (super.noSuchMethod(
            Invocation.getter(#remotePublicKey),
            returnValue: _i3.Future<_i18.PublicKey?>.value(),
          )
          as _i3.Future<_i18.PublicKey?>);

  @override
  _i7.ConnState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeConnState_15(this, Invocation.getter(#state)),
          )
          as _i7.ConnState);

  @override
  _i9.MultiAddr get localMultiaddr =>
      (super.noSuchMethod(
            Invocation.getter(#localMultiaddr),
            returnValue: _FakeMultiAddr_12(
              this,
              Invocation.getter(#localMultiaddr),
            ),
          )
          as _i9.MultiAddr);

  @override
  _i9.MultiAddr get remoteMultiaddr =>
      (super.noSuchMethod(
            Invocation.getter(#remoteMultiaddr),
            returnValue: _FakeMultiAddr_12(
              this,
              Invocation.getter(#remoteMultiaddr),
            ),
          )
          as _i9.MultiAddr);

  @override
  _i7.ConnStats get stat =>
      (super.noSuchMethod(
            Invocation.getter(#stat),
            returnValue: _FakeConnStats_16(this, Invocation.getter(#stat)),
          )
          as _i7.ConnStats);

  @override
  _i2.ConnScope get scope =>
      (super.noSuchMethod(
            Invocation.getter(#scope),
            returnValue: _FakeConnScope_17(this, Invocation.getter(#scope)),
          )
          as _i2.ConnScope);

  @override
  _i3.Future<_i19.Uint8List> read([int? length]) =>
      (super.noSuchMethod(
            Invocation.method(#read, [length]),
            returnValue: _i3.Future<_i19.Uint8List>.value(_i19.Uint8List(0)),
          )
          as _i3.Future<_i19.Uint8List>);

  @override
  _i3.Future<void> write(_i19.Uint8List? data) =>
      (super.noSuchMethod(
            Invocation.method(#write, [data]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void setReadTimeout(Duration? timeout) => super.noSuchMethod(
    Invocation.method(#setReadTimeout, [timeout]),
    returnValueForMissingStub: null,
  );

  @override
  void setWriteTimeout(Duration? timeout) => super.noSuchMethod(
    Invocation.method(#setWriteTimeout, [timeout]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyActivity() => super.noSuchMethod(
    Invocation.method(#notifyActivity, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i12.P2PStream<dynamic>> newStream(_i20.Context? context) =>
      (super.noSuchMethod(
            Invocation.method(#newStream, [context]),
            returnValue: _i3.Future<_i12.P2PStream<dynamic>>.value(
              _FakeP2PStream_18<dynamic>(
                this,
                Invocation.method(#newStream, [context]),
              ),
            ),
          )
          as _i3.Future<_i12.P2PStream<dynamic>>);
}

/// A class which mocks [KeyBook].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyBook extends _i1.Mock implements _i4.KeyBook {
  MockKeyBook() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i18.PublicKey?> pubKey(_i11.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#pubKey, [id]),
            returnValue: _i3.Future<_i18.PublicKey?>.value(),
          )
          as _i3.Future<_i18.PublicKey?>);

  @override
  void addPubKey(_i11.PeerId? id, _i18.PublicKey? pk) => super.noSuchMethod(
    Invocation.method(#addPubKey, [id, pk]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<_i18.PrivateKey?> privKey(_i11.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#privKey, [id]),
            returnValue: _i3.Future<_i18.PrivateKey?>.value(),
          )
          as _i3.Future<_i18.PrivateKey?>);

  @override
  void addPrivKey(_i11.PeerId? id, _i18.PrivateKey? sk) => super.noSuchMethod(
    Invocation.method(#addPrivKey, [id, sk]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<List<_i11.PeerId>> peersWithKeys() =>
      (super.noSuchMethod(
            Invocation.method(#peersWithKeys, []),
            returnValue: _i3.Future<List<_i11.PeerId>>.value(<_i11.PeerId>[]),
          )
          as _i3.Future<List<_i11.PeerId>>);

  @override
  void removePeer(_i11.PeerId? id) => super.noSuchMethod(
    Invocation.method(#removePeer, [id]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PeerMetadata].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeerMetadata extends _i1.Mock implements _i4.PeerMetadata {
  MockPeerMetadata() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic get(_i11.PeerId? p, String? key) =>
      super.noSuchMethod(Invocation.method(#get, [p, key]));

  @override
  void put(_i11.PeerId? p, String? key, dynamic val) => super.noSuchMethod(
    Invocation.method(#put, [p, key, val]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<void> removePeer(_i11.PeerId? id) =>
      (super.noSuchMethod(
            Invocation.method(#removePeer, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>?> getAll(_i11.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#getAll, [peerId]),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);
}

/// A class which mocks [ConnManagementScope].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnManagementScope extends _i1.Mock
    implements _i2.ConnManagementScope {
  MockConnManagementScope() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ScopeStat get stat =>
      (super.noSuchMethod(
            Invocation.getter(#stat),
            returnValue: _FakeScopeStat_19(this, Invocation.getter(#stat)),
          )
          as _i2.ScopeStat);

  @override
  _i3.Future<void> setPeer(_i11.PeerId? peerId) =>
      (super.noSuchMethod(
            Invocation.method(#setPeer, [peerId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void done() => super.noSuchMethod(
    Invocation.method(#done, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<void> reserveMemory(int? size, int? priority) =>
      (super.noSuchMethod(
            Invocation.method(#reserveMemory, [size, priority]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void releaseMemory(int? size) => super.noSuchMethod(
    Invocation.method(#releaseMemory, [size]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<_i2.ResourceScopeSpan> beginSpan() =>
      (super.noSuchMethod(
            Invocation.method(#beginSpan, []),
            returnValue: _i3.Future<_i2.ResourceScopeSpan>.value(
              _FakeResourceScopeSpan_20(
                this,
                Invocation.method(#beginSpan, []),
              ),
            ),
          )
          as _i3.Future<_i2.ResourceScopeSpan>);
}

/// A class which mocks [StreamManagementScope].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamManagementScope extends _i1.Mock
    implements _i2.StreamManagementScope {
  MockStreamManagementScope() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PeerScope get peerScope =>
      (super.noSuchMethod(
            Invocation.getter(#peerScope),
            returnValue: _FakePeerScope_21(this, Invocation.getter(#peerScope)),
          )
          as _i2.PeerScope);

  @override
  _i2.ScopeStat get stat =>
      (super.noSuchMethod(
            Invocation.getter(#stat),
            returnValue: _FakeScopeStat_19(this, Invocation.getter(#stat)),
          )
          as _i2.ScopeStat);

  @override
  _i3.Future<void> setProtocol(String? protocol) =>
      (super.noSuchMethod(
            Invocation.method(#setProtocol, [protocol]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void done() => super.noSuchMethod(
    Invocation.method(#done, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<void> reserveMemory(int? size, int? priority) =>
      (super.noSuchMethod(
            Invocation.method(#reserveMemory, [size, priority]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void releaseMemory(int? size) => super.noSuchMethod(
    Invocation.method(#releaseMemory, [size]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<_i2.ResourceScopeSpan> beginSpan() =>
      (super.noSuchMethod(
            Invocation.method(#beginSpan, []),
            returnValue: _i3.Future<_i2.ResourceScopeSpan>.value(
              _FakeResourceScopeSpan_20(
                this,
                Invocation.method(#beginSpan, []),
              ),
            ),
          )
          as _i3.Future<_i2.ResourceScopeSpan>);

  @override
  _i3.Future<void> setService(String? service) =>
      (super.noSuchMethod(
            Invocation.method(#setService, [service]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [PeerScope].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeerScope extends _i1.Mock implements _i2.PeerScope {
  MockPeerScope() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.PeerId get peer =>
      (super.noSuchMethod(
            Invocation.getter(#peer),
            returnValue: _FakePeerId_14(this, Invocation.getter(#peer)),
          )
          as _i11.PeerId);

  @override
  _i2.ScopeStat get stat =>
      (super.noSuchMethod(
            Invocation.getter(#stat),
            returnValue: _FakeScopeStat_19(this, Invocation.getter(#stat)),
          )
          as _i2.ScopeStat);

  @override
  _i3.Future<void> reserveMemory(int? size, int? priority) =>
      (super.noSuchMethod(
            Invocation.method(#reserveMemory, [size, priority]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void releaseMemory(int? size) => super.noSuchMethod(
    Invocation.method(#releaseMemory, [size]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<_i2.ResourceScopeSpan> beginSpan() =>
      (super.noSuchMethod(
            Invocation.method(#beginSpan, []),
            returnValue: _i3.Future<_i2.ResourceScopeSpan>.value(
              _FakeResourceScopeSpan_20(
                this,
                Invocation.method(#beginSpan, []),
              ),
            ),
          )
          as _i3.Future<_i2.ResourceScopeSpan>);
}

/// A class which mocks [ConnScope].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnScope extends _i1.Mock implements _i2.ConnScope {
  MockConnScope() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ScopeStat get stat =>
      (super.noSuchMethod(
            Invocation.getter(#stat),
            returnValue: _FakeScopeStat_19(this, Invocation.getter(#stat)),
          )
          as _i2.ScopeStat);

  @override
  _i3.Future<void> reserveMemory(int? size, int? priority) =>
      (super.noSuchMethod(
            Invocation.method(#reserveMemory, [size, priority]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void releaseMemory(int? size) => super.noSuchMethod(
    Invocation.method(#releaseMemory, [size]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<_i2.ResourceScopeSpan> beginSpan() =>
      (super.noSuchMethod(
            Invocation.method(#beginSpan, []),
            returnValue: _i3.Future<_i2.ResourceScopeSpan>.value(
              _FakeResourceScopeSpan_20(
                this,
                Invocation.method(#beginSpan, []),
              ),
            ),
          )
          as _i3.Future<_i2.ResourceScopeSpan>);
}
