// Mocks generated by Mockito 5.4.5 from annotations
// in dart_libp2p/test/transport/yamux_stream_hardening_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dart_libp2p/core/crypto/keys.dart' as _i9;
import 'package:dart_libp2p/core/multiaddr.dart' as _i4;
import 'package:dart_libp2p/core/network/conn.dart' as _i3;
import 'package:dart_libp2p/core/network/context.dart' as _i10;
import 'package:dart_libp2p/core/network/rcmgr.dart' as _i5;
import 'package:dart_libp2p/core/network/stream.dart' as _i6;
import 'package:dart_libp2p/core/peer/peer_id.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePeerId_0 extends _i1.SmartFake implements _i2.PeerId {
  _FakePeerId_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnState_1 extends _i1.SmartFake implements _i3.ConnState {
  _FakeConnState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMultiAddr_2 extends _i1.SmartFake implements _i4.MultiAddr {
  _FakeMultiAddr_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnStats_3 extends _i1.SmartFake implements _i3.ConnStats {
  _FakeConnStats_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnScope_4 extends _i1.SmartFake implements _i5.ConnScope {
  _FakeConnScope_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeP2PStream_5<T> extends _i1.SmartFake implements _i6.P2PStream<T> {
  _FakeP2PStream_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Conn].
///
/// See the documentation for Mockito's code generation for more information.
class MockConn extends _i1.Mock implements _i3.Conn {
  MockConn() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i7.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i8.Future<List<_i6.P2PStream<dynamic>>> get streams =>
      (super.noSuchMethod(
            Invocation.getter(#streams),
            returnValue: _i8.Future<List<_i6.P2PStream<dynamic>>>.value(
              <_i6.P2PStream<dynamic>>[],
            ),
          )
          as _i8.Future<List<_i6.P2PStream<dynamic>>>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i2.PeerId get localPeer =>
      (super.noSuchMethod(
            Invocation.getter(#localPeer),
            returnValue: _FakePeerId_0(this, Invocation.getter(#localPeer)),
          )
          as _i2.PeerId);

  @override
  _i2.PeerId get remotePeer =>
      (super.noSuchMethod(
            Invocation.getter(#remotePeer),
            returnValue: _FakePeerId_0(this, Invocation.getter(#remotePeer)),
          )
          as _i2.PeerId);

  @override
  _i8.Future<_i9.PublicKey?> get remotePublicKey =>
      (super.noSuchMethod(
            Invocation.getter(#remotePublicKey),
            returnValue: _i8.Future<_i9.PublicKey?>.value(),
          )
          as _i8.Future<_i9.PublicKey?>);

  @override
  _i3.ConnState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeConnState_1(this, Invocation.getter(#state)),
          )
          as _i3.ConnState);

  @override
  _i4.MultiAddr get localMultiaddr =>
      (super.noSuchMethod(
            Invocation.getter(#localMultiaddr),
            returnValue: _FakeMultiAddr_2(
              this,
              Invocation.getter(#localMultiaddr),
            ),
          )
          as _i4.MultiAddr);

  @override
  _i4.MultiAddr get remoteMultiaddr =>
      (super.noSuchMethod(
            Invocation.getter(#remoteMultiaddr),
            returnValue: _FakeMultiAddr_2(
              this,
              Invocation.getter(#remoteMultiaddr),
            ),
          )
          as _i4.MultiAddr);

  @override
  _i3.ConnStats get stat =>
      (super.noSuchMethod(
            Invocation.getter(#stat),
            returnValue: _FakeConnStats_3(this, Invocation.getter(#stat)),
          )
          as _i3.ConnStats);

  @override
  _i5.ConnScope get scope =>
      (super.noSuchMethod(
            Invocation.getter(#scope),
            returnValue: _FakeConnScope_4(this, Invocation.getter(#scope)),
          )
          as _i5.ConnScope);

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i6.P2PStream<dynamic>> newStream(_i10.Context? context) =>
      (super.noSuchMethod(
            Invocation.method(#newStream, [context]),
            returnValue: _i8.Future<_i6.P2PStream<dynamic>>.value(
              _FakeP2PStream_5<dynamic>(
                this,
                Invocation.method(#newStream, [context]),
              ),
            ),
          )
          as _i8.Future<_i6.P2PStream<dynamic>>);
}
