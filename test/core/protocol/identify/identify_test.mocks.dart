// Mocks generated by Mockito 5.4.5 from annotations
// in dart_libp2p/test/core/protocol/identify/identify_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:dart_libp2p/core/connmgr/conn_manager.dart' as _i6;
import 'package:dart_libp2p/core/event/bus.dart' as _i7;
import 'package:dart_libp2p/core/host/host.dart' as _i9;
import 'package:dart_libp2p/core/multiaddr.dart' as _i10;
import 'package:dart_libp2p/core/network/context.dart' as _i13;
import 'package:dart_libp2p/core/network/network.dart' as _i4;
import 'package:dart_libp2p/core/network/stream.dart' as _i8;
import 'package:dart_libp2p/core/peer/addr_info.dart' as _i12;
import 'package:dart_libp2p/core/peer/peer_id.dart' as _i2;
import 'package:dart_libp2p/core/peerstore.dart' as _i3;
import 'package:dart_libp2p/core/protocol/switch.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePeerId_0 extends _i1.SmartFake implements _i2.PeerId {
  _FakePeerId_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePeerstore_1 extends _i1.SmartFake implements _i3.Peerstore {
  _FakePeerstore_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNetwork_2 extends _i1.SmartFake implements _i4.Network {
  _FakeNetwork_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProtocolSwitch_3 extends _i1.SmartFake
    implements _i5.ProtocolSwitch {
  _FakeProtocolSwitch_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnManager_4 extends _i1.SmartFake implements _i6.ConnManager {
  _FakeConnManager_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEventBus_5 extends _i1.SmartFake implements _i7.EventBus {
  _FakeEventBus_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeP2PStream_6<T> extends _i1.SmartFake implements _i8.P2PStream<T> {
  _FakeP2PStream_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSubscription_7<T> extends _i1.SmartFake
    implements _i7.Subscription<T> {
  _FakeSubscription_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEmitter_8 extends _i1.SmartFake implements _i7.Emitter {
  _FakeEmitter_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Host].
///
/// See the documentation for Mockito's code generation for more information.
class MockHost extends _i1.Mock implements _i9.Host {
  MockHost() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PeerId get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _FakePeerId_0(this, Invocation.getter(#id)),
          )
          as _i2.PeerId);

  @override
  _i3.Peerstore get peerStore =>
      (super.noSuchMethod(
            Invocation.getter(#peerStore),
            returnValue: _FakePeerstore_1(this, Invocation.getter(#peerStore)),
          )
          as _i3.Peerstore);

  @override
  List<_i10.MultiAddr> get addrs =>
      (super.noSuchMethod(
            Invocation.getter(#addrs),
            returnValue: <_i10.MultiAddr>[],
          )
          as List<_i10.MultiAddr>);

  @override
  _i4.Network get network =>
      (super.noSuchMethod(
            Invocation.getter(#network),
            returnValue: _FakeNetwork_2(this, Invocation.getter(#network)),
          )
          as _i4.Network);

  @override
  _i5.ProtocolSwitch get mux =>
      (super.noSuchMethod(
            Invocation.getter(#mux),
            returnValue: _FakeProtocolSwitch_3(this, Invocation.getter(#mux)),
          )
          as _i5.ProtocolSwitch);

  @override
  _i6.ConnManager get connManager =>
      (super.noSuchMethod(
            Invocation.getter(#connManager),
            returnValue: _FakeConnManager_4(
              this,
              Invocation.getter(#connManager),
            ),
          )
          as _i6.ConnManager);

  @override
  _i7.EventBus get eventBus =>
      (super.noSuchMethod(
            Invocation.getter(#eventBus),
            returnValue: _FakeEventBus_5(this, Invocation.getter(#eventBus)),
          )
          as _i7.EventBus);

  @override
  _i11.Future<void> connect(_i12.AddrInfo? pi, {_i13.Context? context}) =>
      (super.noSuchMethod(
            Invocation.method(#connect, [pi], {#context: context}),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);

  @override
  void setStreamHandler(String? pid, _i4.StreamHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(#setStreamHandler, [pid, handler]),
        returnValueForMissingStub: null,
      );

  @override
  void setStreamHandlerMatch(
    String? pid,
    bool Function(String)? match,
    _i4.StreamHandler? handler,
  ) => super.noSuchMethod(
    Invocation.method(#setStreamHandlerMatch, [pid, match, handler]),
    returnValueForMissingStub: null,
  );

  @override
  void removeStreamHandler(String? pid) => super.noSuchMethod(
    Invocation.method(#removeStreamHandler, [pid]),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Future<_i8.P2PStream<dynamic>> newStream(
    _i2.PeerId? p,
    List<String>? pids,
    _i13.Context? context,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#newStream, [p, pids, context]),
            returnValue: _i11.Future<_i8.P2PStream<dynamic>>.value(
              _FakeP2PStream_6<dynamic>(
                this,
                Invocation.method(#newStream, [p, pids, context]),
              ),
            ),
          )
          as _i11.Future<_i8.P2PStream<dynamic>>);

  @override
  _i11.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);

  @override
  _i11.Future<void> start() =>
      (super.noSuchMethod(
            Invocation.method(#start, []),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);
}

/// A class which mocks [EventBus].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventBus extends _i1.Mock implements _i7.EventBus {
  MockEventBus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Subscription<dynamic> subscribe(
    Object? eventType, {
    List<_i7.SubscriptionOpt>? opts,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#subscribe, [eventType], {#opts: opts}),
            returnValue: _FakeSubscription_7<dynamic>(
              this,
              Invocation.method(#subscribe, [eventType], {#opts: opts}),
            ),
          )
          as _i7.Subscription<dynamic>);

  @override
  _i11.Future<_i7.Emitter> emitter(
    dynamic eventType, {
    List<_i7.EmitterOpt>? opts,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#emitter, [eventType], {#opts: opts}),
            returnValue: _i11.Future<_i7.Emitter>.value(
              _FakeEmitter_8(
                this,
                Invocation.method(#emitter, [eventType], {#opts: opts}),
              ),
            ),
          )
          as _i11.Future<_i7.Emitter>);

  @override
  List<String> getAllEventTypes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllEventTypes, []),
            returnValue: <String>[],
          )
          as List<String>);
}
